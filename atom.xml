<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>halocherry</title>
  
  
  <link href="https://example.com/atom.xml" rel="self"/>
  
  <link href="https://example.com/"/>
  <updated>2020-10-16T16:07:03.071Z</updated>
  <id>https://example.com/</id>
  
  <author>
    <name>Jay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PTA-Python 习题精选</title>
    <link href="https://example.com/2020/10/09/3/"/>
    <id>https://example.com/2020/10/09/3/</id>
    <published>2020-10-08T16:00:00.000Z</published>
    <updated>2020-10-16T16:07:03.071Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-特殊a串数列求和"><a href="#1-特殊a串数列求和" class="headerlink" title="1. 特殊a串数列求和"></a>1. 特殊a串数列求和</h3><p>给定两个均不超过9的正整数<em>a</em>和<em>n</em>，要求编写程序求<em>a</em> + <em>a a</em> + <em>a</em> <em>a</em> <em>a</em> + + ⋯ + a a⋯a（n个a）之和。</p><p><strong>输入格式</strong>：输入在一行中给出不超过9的正整数<em>a</em>和<em>n</em>。</p><p><strong>输出格式</strong>：在一行中按照“s = 对应的和”的格式输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a, n = map(int, input().split())  <span class="comment"># 一次输入多个整数</span></span><br><span class="line">m = <span class="number">0</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> &lt; a &lt;= <span class="number">9</span> <span class="keyword">and</span> <span class="number">0</span> &lt; n &lt;= <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">        m = a*(<span class="number">10</span>**i) + m  <span class="comment"># 注意观察后一项与前一项的关系</span></span><br><span class="line">        s = s + m</span><br><span class="line">    print(<span class="string">&quot;s = &quot;</span>, s)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;0 &lt;= a &lt;= 9 &amp; 0 &lt;= n &lt;= 9! input again!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-查验身份证"><a href="#2-查验身份证" class="headerlink" title="2. 查验身份证"></a>2. 查验身份证</h3><p>一个合法的身份证号码由17位地区、日期编号和顺序编号加一位校验码组成。校验码计算规则如下：首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11求模得到值<strong>Z</strong>，最后按照以下关系对应<strong>Z</strong>值与校验码<strong>M</strong>的值</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Z：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line">M：<span class="number">1</span> <span class="number">0</span> X <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。</p><p><strong>输入格式</strong>：输入第一行给出正整数<em>N</em>（≤100）是输入的身份证号码的个数。随后<em>N</em>行，每行给出1个18位身份证号码。</p><p><strong>输出格式</strong>：按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出 <strong>All Pass！</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span>(<span class="params">ilist</span>):</span>  <span class="comment"># 判别函数</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    qlist = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>]  <span class="comment"># 权重列表</span></span><br><span class="line">    mlist = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>]  <span class="comment"># 检验列表</span></span><br><span class="line">    num = ilist[:<span class="number">17</span>]  <span class="comment"># 取输入的身份证号的前17位</span></span><br><span class="line">    last = ilist[<span class="number">-1</span>]  <span class="comment"># 取输入的身份证号的最后一位</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(num)):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;0&#x27;</span> &lt;= num[i] &lt;= <span class="string">&#x27;9&#x27;</span>:  <span class="comment"># 判断前十七位是否都为数字</span></span><br><span class="line">            m = int(num[i]) * qlist[i]</span><br><span class="line">            s = s + m  <span class="comment"># 求和</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    re = s % <span class="number">11</span>   <span class="comment"># 求模</span></span><br><span class="line">    <span class="keyword">if</span> mlist[re] == last:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment"># 实现一次输入多个字符串</span></span><br><span class="line">li = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">    li.append(input())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(li)):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> judge(li[i]):</span><br><span class="line">        print(li[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> count == n:</span><br><span class="line">    print(<span class="string">&quot;All Pass!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-求整数序列中出现次数最多的数"><a href="#3-求整数序列中出现次数最多的数" class="headerlink" title="3. 求整数序列中出现次数最多的数"></a>3. 求整数序列中出现次数最多的数</h3><p>本题要求统计一个整型序列中出现次数最多的整数及其出现次数。</p><p><strong>输入格式</strong>：输入在一行中给出序列中整数个数N（0&lt;N≤1000），以及N个整数。数字间以空格分隔。</p><p><strong>输出格式</strong>：在一行中输出出现次数最多的整数及其出现次数，数字间以空格分隔。题目保证这样的数字是唯一的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = input().split()</span><br><span class="line">h = a.count(a[<span class="number">0</span>])  <span class="comment"># 先计算第一位出现的次数</span></span><br><span class="line">x = a[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(a)):</span><br><span class="line">    <span class="keyword">if</span> a.count(a[i]) &gt; h:</span><br><span class="line">        h = a.count(a[i])  <span class="comment"># 出现次数</span></span><br><span class="line">        x = a[i]    <span class="comment"># 出现次数最多的整数</span></span><br><span class="line">print(<span class="string">&quot;&#123;:&gt;3s&#125;&#123;:&gt;3d&#125;&quot;</span>.format(x, h))</span><br></pre></td></tr></table></figure><p>​    <strong>附：C语言中求众数的程序：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n,i,j;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;输入整数个数：&quot;</span>); </span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">   <span class="keyword">int</span> a[n],b[n];   <span class="comment">//a[n]用于存放数组中的数，b[n]用于存放出现的次数 </span></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      b[i]=<span class="number">0</span>;   <span class="comment">//b[n]初始化 </span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">if</span> (a[j]==a[i])</span><br><span class="line">     &#123;</span><br><span class="line">        b[i]=b[i]+<span class="number">1</span>;  <span class="comment">//如果后面有数跟这个数相等，则其出现次数加1 </span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">int</span> max = b[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span>(b[i]&gt;max)</span><br><span class="line">      &#123;</span><br><span class="line">      max = b[i];  <span class="comment">//获得众数出现的次数 </span></span><br><span class="line">      index = i;   <span class="comment">//获得该数的下标 </span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;众数：%d  &quot;</span>,a[index]);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;次数：%d&quot;</span>,max); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-字符串转换成十进制整数"><a href="#4-字符串转换成十进制整数" class="headerlink" title="4. 字符串转换成十进制整数"></a>4. 字符串转换成十进制整数</h3><p>输入一个以<strong>#</strong>结束的字符串，本题要求滤去所有的非十六进制字符（不分大小写），组成一个新的表示十六进制数字的字符串，然后将其转换为十进制数后输出。如果在第一个十六进制字符之前存在字符 “-”，则代表该数是负数。</p><p><strong>输入格式</strong>：输入在一行中给出一个以#结束的非空字符串。</p><p><strong>输出格式</strong>：在一行中输出转换后的十进制数。题目保证输出在长整型范围内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = input()  <span class="comment"># 输入字符串</span></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">mask = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(a)):</span><br><span class="line">    <span class="keyword">if</span> a[i] == <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span>          <span class="comment"># 控制只处理“#”前面的字符串</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= a[i] &lt;= <span class="string">&#x27;9&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;a&#x27;</span> &lt;= str.lower(a[i]) &lt;= <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">        s = s + a[i]   <span class="comment"># 把该字符串中的十六进制字符重新组合为一个新的字符串</span></span><br><span class="line">index = a.find(s[<span class="number">0</span>])   <span class="comment"># 找到第一个十六进制字符的下标</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, index):  <span class="comment"># 寻找第一个十六进制字符之前是否存在字符“-”</span></span><br><span class="line">    <span class="keyword">if</span> a[i] == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        mask = <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">ten = int(str(s), <span class="number">16</span>)  <span class="comment"># 将该十六进制字符串转化为十进制</span></span><br><span class="line"><span class="keyword">if</span> mask == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> + str(ten))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(ten)</span><br></pre></td></tr></table></figure><h3 id="5-判断回文字符串"><a href="#5-判断回文字符串" class="headerlink" title="5. 判断回文字符串"></a>5. 判断回文字符串</h3><p>输入一个字符串，判断该字符串是否为回文。回文就是字符串中心对称，从左向右读和从右向左读的内容是一样的。</p><p><strong>输入格式：</strong>输入在一行中给出一个不超过80个字符长度的、以回车结束的非空字符串。</p><p><strong>输出格式：</strong>输出在第1行中输出字符串。如果它是回文字符串，在第2行中输出<strong>Yes</strong>，否则输出<strong>NO</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = input()</span><br><span class="line">a = reversed(list(s))</span><br><span class="line"><span class="keyword">if</span> list(a) == list(s):</span><br><span class="line">    print(s)</span><br><span class="line">    print(<span class="string">&quot;Yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(s)</span><br><span class="line">    print(<span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="6-统计素数并求和"><a href="#6-统计素数并求和" class="headerlink" title="6.  统计素数并求和"></a>6.  统计素数并求和</h3><p>本题要求统计给定整数<em>M</em>和<em>N</em>区间内素数的个数并对它们求和。</p><p><strong>输入格式：</strong>输入在一行中给出两个正整数<em>M</em>和<em>N</em>（1≤<em>M</em>≤<em>N</em>≤500）。</p><p><strong>输出格式：</strong>在一行中顺序输出<em>M</em>和<em>N</em>区间内素数的个数以及它们的和，数字间以空格分隔。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isprime</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> num != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    cut = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(a, b + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> isprime(i):</span><br><span class="line">            cut = cut + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> cut</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(a, b + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> isprime(i):</span><br><span class="line">            s = s + i</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">m, n = map(int, input().split())</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt;= m &lt;= n &lt;= <span class="number">500</span>:</span><br><span class="line">    print(<span class="string">&quot;&#123;:d&#125; &#123;:d&#125;&quot;</span>.format(count(m, n), sum(m, n)))  <span class="comment"># 以空格分隔</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;1 &lt;= m &lt;= n &lt;= 500!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-验证“哥德巴赫猜想”"><a href="#7-验证“哥德巴赫猜想”" class="headerlink" title="7.  验证“哥德巴赫猜想”"></a>7.  验证“哥德巴赫猜想”</h3><p>数学领域著名的“哥德巴赫猜想”的大致意思是：任何一个大于2的偶数总能表示为两个素数之和。比如：24=5+19，其中5和19都是素数。本实验的任务是设计一个程序，验证20亿以内的偶数都可以分解成两个素数之和。</p><p><strong>输入格式：</strong>输入在一行中给出一个(2, 2 000 000 000]范围内的偶数N。</p><p><strong>输出格式：</strong>在一行中按照格式“N = p + q”输出N的素数分解，其中p ≤ q均为素数。又因为这样的分解不唯一（例如24还可以分解为7+17），要求必须输出所有解中p最小的解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isprime</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(math.sqrt(num) + <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line"><span class="keyword">if</span> <span class="number">2</span> &lt; n &lt;= <span class="number">2000000000</span> <span class="keyword">and</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, (n // <span class="number">2</span> + <span class="number">1</span>)):  <span class="comment"># &quot;/&quot;表示浮点数除法，返回浮点结果; &quot;//&quot; 表示                                         整数除法（向下取整）</span></span><br><span class="line">        x = n - i</span><br><span class="line">        <span class="keyword">if</span> isprime(i) <span class="keyword">and</span> isprime(x):</span><br><span class="line">            print(<span class="string">&quot;&#123;:d&#125; = &#123;:d&#125; + &#123;:d&#125;&quot;</span>.format(n, i, x))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;请输入20亿以内的偶数！&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="8-统计字符"><a href="#8-统计字符" class="headerlink" title="8.  统计字符"></a>8.  统计字符</h3><p>本题要求编写程序，输入10个字符，统计其中英文字母、空格或回车、数字字符和其他字符的个数。</p><p><strong>输入格式：</strong>输入为10个字符。最后一个回车表示输入结束，不算在内。</p><p><strong>输出格式：</strong>在一行内按照以下格式输出。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">letter</span> = 英文字母个数, <span class="attr">blank</span> = 空格或回车个数, <span class="attr">digit</span> = 数字字符个数, <span class="attr">other</span> = 其他字符个数</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">li = []</span><br><span class="line">letter = <span class="number">0</span>;blank = <span class="number">0</span>;digit = <span class="number">0</span>;other = <span class="number">0</span>;count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:     <span class="comment"># 输入固定数目的字符</span></span><br><span class="line">    a = list(input())</span><br><span class="line">    count = count + <span class="number">1</span>  <span class="comment"># count用于统计回车字符的个数</span></span><br><span class="line">    li.extend(a)       <span class="comment"># extend()函数用于在列表末尾一次性追加另一个序列中的多个值</span></span><br><span class="line">    <span class="keyword">if</span> len(li) + count &gt; <span class="number">10</span>:  <span class="comment"># 最后一个回车表示输入结束，不算在内</span></span><br><span class="line">        count = count <span class="number">-1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(li)):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= str.lower(li[i]) &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">        letter = letter + <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> li[i] == <span class="string">&quot; &quot;</span>:</span><br><span class="line">        blank = blank + <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= li[i] &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">        digit = digit + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        other = other + <span class="number">1</span></span><br><span class="line">print(<span class="string">&quot;letter = &#123;:d&#125;, blank = &#123;:d&#125;, digit = &#123;:d&#125;, other = &#123;:d&#125;&quot;</span>.format(letter, blank + count, digit, other))</span><br></pre></td></tr></table></figure><h3 id="9-猴子选大王"><a href="#9-猴子选大王" class="headerlink" title="9. 猴子选大王"></a>9. 猴子选大王</h3><p>一群猴子要选新猴王。新猴王的选择方法是：让N只候选猴子围成一圈，从某位置起顺序编号为1~N号。从第1号开始报数，每轮从1报到3，凡报到3的猴子即退出圈子，接着又从紧邻的下一只猴子开始同样的报数。如此不断循环，最后剩下的一只猴子就选为猴王。请问是原来第几号猴子当选猴王？</p><p><strong>输入格式：</strong>输入在一行中给一个正整数N（≤1000）。</p><p><strong>输出格式：</strong>在一行中输出当选猴王的编号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">约瑟夫环(约瑟夫问题)是一个数学的应用问题：已知n个人(以编号1，2，3...n分别表示)围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列。他的下一个人又从1开始报数，数到m的那个人又出列。依此规律重复下去，直到圆桌周围的人全部出列。通常解决这类问题时我们把编号从 0~n-1，最后结果+1即为原问题的解。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">n=int(input())</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    monkey=[i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">while</span> len(monkey) &gt;= <span class="number">3</span>:</span><br><span class="line">        monkey.pop(<span class="number">2</span>)                  <span class="comment"># 第三只猴子的下标是2</span></span><br><span class="line">        monkey.append(monkey.pop(<span class="number">0</span>))   <span class="comment"># 将已删除元素前的两个元素移到队列尾，转化为线性问题</span></span><br><span class="line">        monkey.append(monkey.pop(<span class="number">0</span>))</span><br><span class="line">    print(monkey[<span class="number">1</span>])  <span class="comment"># 直到最后只剩两只猴子（或刚开始就只有两只猴子）</span></span><br></pre></td></tr></table></figure><h3 id="10-矩阵运算"><a href="#10-矩阵运算" class="headerlink" title="10. 矩阵运算"></a>10. 矩阵运算</h3><p>给定一个<em>n</em>×<em>n</em>的方阵，本题要求计算该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。副对角线为从矩阵的右上角至左下角的连线。</p><p><strong>输入格式：</strong>输入第一行给出正整数<em>n</em>（1&lt;<em>n</em>≤10）；随后<em>n</em>行，每行给出<em>n</em>个整数，其间以空格分隔。</p><p><strong>输出格式：</strong>在一行中给出该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">a = []</span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">    <span class="comment"># 将输入的以空格分隔的字符先存入列表再存入列表a中，即可形成多维列表</span></span><br><span class="line">    a.append(list(map(int, input().split()))) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">        <span class="keyword">if</span> i != n<span class="number">-1</span> <span class="keyword">and</span> j != n<span class="number">-1</span> <span class="keyword">and</span> (i+j) != n<span class="number">-1</span>:  <span class="comment"># 副对角线上 i+j=n-1</span></span><br><span class="line">            s = s + a[i][j]</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><h3 id="11-找鞍点"><a href="#11-找鞍点" class="headerlink" title="11. 找鞍点"></a>11. 找鞍点</h3><p>一个矩阵元素的“鞍点”是指该位置上的元素值在该行上最大、在该列上最小。</p><p>本题要求编写程序，求一个给定的<em>n</em>阶方阵的鞍点。</p><p><strong>输入格式：</strong>输入第一行给出一个正整数<em>n</em>（1≤<em>n</em>≤6）。随后<em>n</em>行，每行给出<em>n</em>个整数，其间以空格分隔。</p><p><strong>输出格式：</strong>输出在一行中按照“行下标 列下标”（下标从0开始）的格式输出鞍点的位置。如果鞍点不存在，则输出“NONE”。题目保证给出的矩阵至多存在一个鞍点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">    a.append(list(map(int, input().split())))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">        <span class="keyword">if</span> a[i][j] == max(a[i]):   <span class="comment"># 找出每行中的最大值</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">if</span> a[i][j] &gt; a[k][j]:  <span class="comment"># 判断每行中的最大值是否为该列中的最小值</span></span><br><span class="line">                    flag = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                print(<span class="string">&quot;&#123;:d&#125; &#123;:d&#125;&quot;</span>.format(i, j))</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">    print(<span class="string">&quot;NONE&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="12-输出三角形字符阵列"><a href="#12-输出三角形字符阵列" class="headerlink" title="12. 输出三角形字符阵列"></a>12. 输出三角形字符阵列</h3><p>本题要求编写程序，输出<em>n</em>行由大写字母A开始构成的三角形字符阵列。</p><p><strong>输入格式：</strong>输入在一行中给出一个正整数<em>n</em>（1≤<em>n</em>&lt;7）。</p><p><strong>输出格式：</strong>输出<em>n</em>行由大写字母A开始构成的三角形字符阵列。格式见输出样例，其中每个字母后面都有一个空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">A B C D </span><br><span class="line">E F G </span><br><span class="line">H I </span><br><span class="line">J </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">start = <span class="number">65</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, i):</span><br><span class="line">        print(<span class="string">&quot;&#123;:c&#125;&quot;</span>.format(start), end=<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 用ASCII码输出字符</span></span><br><span class="line">        start = start + <span class="number">1</span></span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count == i:</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            print()</span><br></pre></td></tr></table></figure><h3 id="13-矩阵转置"><a href="#13-矩阵转置" class="headerlink" title="13. 矩阵转置"></a>13. 矩阵转置</h3><p>将一个3×3矩阵转置（即行和列互换）</p><p><strong>输入格式：</strong>在一行中输入9个小于100的整数，其间各以一个空格间隔。</p><p><strong>输出格式：</strong>输出3行3列的二维数组，每个数据输出占4列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">   1   4   7</span><br><span class="line">   2   5   8</span><br><span class="line">   3   6   9</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = list(map(int, input().split()))</span><br><span class="line">b = [a[i::<span class="number">3</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]  <span class="comment"># 切片：object[start_index:end_index:step]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">&quot;&#123;:4d&#125;&quot;</span>.format(b[i][j]), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><h3 id="14-找出不是两个数组共有的元素"><a href="#14-找出不是两个数组共有的元素" class="headerlink" title="14. 找出不是两个数组共有的元素"></a>14. 找出不是两个数组共有的元素</h3><p>给定两个整型数组，本题要求找出不是两者共有的元素。</p><p><strong>输入格式：</strong>输入分别在两行中给出两个整型数组，每行先给出正整数<em>N</em>（≤20），随后是<em>N</em>个整数，其间以空格分隔。</p><p><strong>输出格式：</strong>在一行中按照数字给出的顺序输出不是两数组共有的元素，数字间以空格分隔，但行末不得有多余的空格。题目保证至少存在一个这样的数字。同一数字不重复输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">a = list(input().split())</span><br><span class="line">b = list(input().split())</span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line">trim_a = a[<span class="number">1</span>:]</span><br><span class="line">trim_b = b[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trim_a:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> trim_b <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> result:</span><br><span class="line">        result.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trim_b:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> trim_a <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> result:</span><br><span class="line">        result.append(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27; &#x27;</span>.join(result))  <span class="comment"># 把result中的元素以空格分隔输出</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Python join()方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</span></span><br><span class="line"><span class="string">例：   str = &quot;-&quot;</span></span><br><span class="line"><span class="string">      seq = (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span></span><br><span class="line"><span class="string">      print str.join(seq)</span></span><br><span class="line"><span class="string">输出： a-b-c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="15-找完数"><a href="#15-找完数" class="headerlink" title="15. 找完数"></a>15. 找完数</h3><p>所谓完数就是该数恰好等于除自身外的因子之和。例如：6=1+2+3，其中1、2、3为6的因子。本题要求编写程序，找出任意两正整数<em>m</em>和<em>n</em>之间的所有完数。</p><p><strong>输入格式：</strong>输入在一行中给出2个正整数<em>m</em>和<em>n</em>（1&lt;<em>m</em>≤<em>n</em>≤10000），中间以空格分隔。</p><p><strong>输出格式：</strong>逐行输出给定范围内每个完数的因子累加形式的分解式，每个完数占一行，格式为“完数 = 因子1 + 因子2 + … + 因子k”，其中完数和因子均按递增顺序给出。若区间内没有完数，则输出“None”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">m, n = map(int, input().split())</span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m, n+<span class="number">1</span>):</span><br><span class="line">    l.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, int(math.sqrt(i)+<span class="number">1</span>)):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:   <span class="comment"># 如果 i%j==0,则j是i的因子</span></span><br><span class="line">            l.append(j)</span><br><span class="line">            <span class="keyword">if</span> j*j != i:  <span class="comment"># 如果 j**2==i,只添加一次，避免重复</span></span><br><span class="line">                l.append(int(i/j))   <span class="comment"># python中 i/j 结果默认是浮点型的</span></span><br><span class="line">    <span class="keyword">if</span> sum(l) == i:</span><br><span class="line">        print(<span class="string">&quot;&#123;:d&#125; =&quot;</span>.format(i), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        l.sort()</span><br><span class="line">        l1 = [str(i) <span class="keyword">for</span> i <span class="keyword">in</span> l]   <span class="comment"># join函数不能组合数字类型,转化为字符型</span></span><br><span class="line">        print(<span class="string">&#x27; + &#x27;</span>.join(l1))</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">    l = []</span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&quot;None&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-特殊a串数列求和&quot;&gt;&lt;a href=&quot;#1-特殊a串数列求和&quot; class=&quot;headerlink&quot; title=&quot;1. 特殊a串数列求和&quot;&gt;&lt;/a&gt;1. 特殊a串数列求和&lt;/h3&gt;&lt;p&gt;给定两个均不超过9的正整数&lt;em&gt;a&lt;/em&gt;和&lt;em&gt;n&lt;/em&gt;，要</summary>
      
    
    
    
    
    <category term="python" scheme="https://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>最小二乘法</title>
    <link href="https://example.com/2020/10/07/2/"/>
    <id>https://example.com/2020/10/07/2/</id>
    <published>2020-10-06T16:00:00.000Z</published>
    <updated>2020-10-08T07:08:52.256Z</updated>
    
    <content type="html"><![CDATA[<p>最小二乘法（又称最小平方法）是一种数学优化技术，它通过最小化误差的平方和来寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。在机器学习，尤其是回归模型中，经常可以看到最小二乘法的身影。</p><hr><h2 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法:"></a>最小二乘法:</h2><p>目标函数 = $\sum$(观测值-理论值)<sup>2</sup></p><p>​      观测值就是我们的多组样本，理论值就是我们的假设拟合函数。目标函数也就是在机器学习中常说的损失函数，我们的目标是得到使目标函数最小化时候的拟合函数的模型。</p><hr><p><strong>先来看一个例子：</strong></p><p>测量一个物体的长度，用不同的测量工具得到的结果略有不同：</p><div class="table-container"><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">10.2</th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">10.3</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">9.8</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">9.9</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">9.8</td></tr></tbody></table></div><p>将测试的值在坐标系中绘制出来</p><p><img src="/2020/10/07/2/1.png" alt="1" style="zoom:67%;"></p><p>假设该物体的真实长度为$y$，在图上做出每个点到y的距离，即测量值与真实值之间的误差</p><p><img src="/2020/10/07/2/2.png" alt="2" style="zoom:67%;"></p><p>误差即为|$y$-$y_i$|，取绝对值较麻烦，所以可用平方代替：($y$-$y_i$)<sup>2</sup></p><p>总的误差平方就是        </p><p>​                 L = $\sum$($y$-$y_i$)<sup>2</sup></p><p>真实值$y$是猜测的，所以可以不断变换</p><p><img src="/2020/10/07/2/3.gif" alt="3" style="zoom:67%;"></p><p>则总的误差L 也是在不断地变化，最小二乘法要做的就是让总误差L最小，此时的猜测值$y$即为真值</p><p>即：</p><p>​          <strong>L = $\sum$($y$-$y_i$)<sup>2 </sup></strong> 最小 ——&gt;&gt; 真值$y$</p><hr><p><strong>再来看下一个例子：</strong></p><p><img src="/2020/10/07/2/4.png" alt="4" style="zoom:67%;"></p><p>近似为线性关系，所以我们不妨设：<strong>f(x) = ax+b</strong></p><p><img src="/2020/10/07/2/5.png" alt="5" style="zoom:67%;"></p><p>则       <strong>L= $\sum$(f($x_i$)-$y_i$)<sup>2</sup> =$\sum$(a$x_i$+b-$y_i$)<sup>2</sup></strong></p><hr><p>不同的a和b会导致不同的 L,根据多元微积分，</p><p>当     <img src="/2020/10/07/2/6.png" alt="6" style="zoom:67%;"></p><p>此时 L 取的最小值，求出此时的a值和b值</p><p>（或假设 f(x) = a$x_2$+bx+c,按照上述方法求出a，b，c值，选择不同的f(x),可得到不同的拟合曲线）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最小二乘法（又称最小平方法）是一种数学优化技术，它通过最小化误差的平方和来寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。在机器学习，尤其是回归模型中，经常可以看到最小二乘法的身影。&lt;/p&gt;
&lt;hr&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown快速入门</title>
    <link href="https://example.com/2020/10/06/firstPassage/"/>
    <id>https://example.com/2020/10/06/firstPassage/</id>
    <published>2020-10-06T15:40:23.000Z</published>
    <updated>2020-10-09T10:52:30.748Z</updated>
    
    <content type="html"><![CDATA[<p>MarkDown 是一种轻量级标记语言，它允许我们使用易读易写的纯文本格式编写文档，目前许多网站都在广泛使用MarkDown来撰写文章或是在论坛发表文章，当然用Hexo+github搭建的个人博客中也支持使用MarkDown来撰写文章，为了更好地搭建个人博客，我们有必要使用MarkDown来帮助我们来编写格式更好的文章。</p><h1 id="Markdown快速入门（typora）"><a href="#Markdown快速入门（typora）" class="headerlink" title="Markdown快速入门（typora）"></a>Markdown快速入门（typora）</h1><h2 id="1-代码块："><a href="#1-代码块：" class="headerlink" title="1.代码块："></a>1.代码块：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码块语法：</span></span><br><span class="line">​```java  <span class="comment">//得到java代码块，可在其中输入java代码</span></span><br><span class="line">     </span><br><span class="line">​```python  <span class="comment">//得到python代码块，可在其中输入python代码</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>python代码</strong><br>输入 <strong>“  ```python  ”</strong>, 即可得到下面这个python代码块，可在其中输入python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">address=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>)</span><br><span class="line">s.bind(address)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data,addr=s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">&#x27;收到的%s的数据:%s&#x27;</span>%(addr,data.decode()))</span><br><span class="line">    msg=input(<span class="string">&#x27;输入发送的信息&#x27;</span>)</span><br><span class="line">    s.sendto(msg.encode(),address)</span><br></pre></td></tr></table></figure><h2 id="2-标题："><a href="#2-标题：" class="headerlink" title="2.标题："></a>2.标题：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标题语法</span></span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line"><span class="comment">//#后面要有空格</span></span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="3-字体："><a href="#3-字体：" class="headerlink" title="3.字体："></a>3.字体：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加粗</span></span><br><span class="line">**故事的小黄花**</span><br><span class="line"><span class="comment">//代码高亮显示</span></span><br><span class="line">`从出生那年就飘着`</span><br><span class="line"><span class="comment">//删除线</span></span><br><span class="line">~~童年的荡秋千~~</span><br><span class="line"><span class="comment">//斜体</span></span><br><span class="line">*随记忆一直晃到现在*</span><br></pre></td></tr></table></figure><p><strong>故事的小黄花</strong></p><p><code>从出生那年就飘着</code></p><p><del>童年的荡秋千</del></p><p><em>随记忆一直晃到现在</em></p><h2 id="4-引用"><a href="#4-引用" class="headerlink" title="4.引用"></a>4.引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用语法</span></span><br><span class="line">&gt;作者：jay</span><br><span class="line">&gt;&gt;作者：jay</span><br><span class="line">&gt;&gt;&gt;作者：jay</span><br></pre></td></tr></table></figure><blockquote><p>作者：jay</p><blockquote><p>作者：jay</p><blockquote><p>作者：jay</p></blockquote></blockquote></blockquote><h2 id="5-分割线"><a href="#5-分割线" class="headerlink" title="5.分割线"></a>5.分割线</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分割线</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">//分割线2</span></span><br><span class="line">***</span><br></pre></td></tr></table></figure><hr><hr><h2 id="6-图片插入"><a href="#6-图片插入" class="headerlink" title="6.图片插入"></a>6.图片插入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在线图片/本地图片</span></span><br><span class="line">![图片名字](图片路径)</span><br></pre></td></tr></table></figure><p><img src="/2020/10/06/firstPassage/1.jpg" alt="我的照片"></p><h2 id="7-超链接"><a href="#7-超链接" class="headerlink" title="7.超链接"></a>7.超链接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//超链接语法</span></span><br><span class="line">[超链接的内容](超链接地址)</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/">菜鸟教程</a></p><h2 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无序列表</span></span><br><span class="line">-目录<span class="number">1</span></span><br><span class="line">-目录<span class="number">2</span></span><br><span class="line">-目录<span class="number">3</span></span><br><span class="line"><span class="comment">//有序列表 1+. +名称</span></span><br></pre></td></tr></table></figure><ul><li>目录1</li><li>目录2</li><li>目录3</li></ul><ol><li>首页</li><li>分类</li><li>标签</li></ol><h2 id="9-表格"><a href="#9-表格" class="headerlink" title="9.表格"></a>9.表格</h2><div class="table-container"><table><thead><tr><th style="text-align:center">表头</th><th style="text-align:center">表头</th><th style="text-align:center">表头</th></tr></thead><tbody><tr><td style="text-align:center">内容</td><td style="text-align:center">内容</td><td style="text-align:center">内容</td></tr></tbody></table></div><h2 id="10-启程"><a href="#10-启程" class="headerlink" title="10.启程"></a>10.启程</h2><p>​        这是我的第一遍博客，以后我会把平时学习的知识和心得发表到博客上，坚持比努力更可怕，即刻启程，加油！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;MarkDown 是一种轻量级标记语言，它允许我们使用易读易写的纯文本格式编写文档，目前许多网站都在广泛使用MarkDown来撰写文章或是在论坛发表文章，当然用Hexo+github搭建的个人博客中也支持使用MarkDown来撰写文章，为了更好地搭建个人博客，我们有必要使用</summary>
      
    
    
    
    
    <category term="MarkDown" scheme="https://example.com/tags/MarkDown/"/>
    
  </entry>
  
</feed>
