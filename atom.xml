<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>halocherry</title>
  
  
  <link href="https://example.com/atom.xml" rel="self"/>
  
  <link href="https://example.com/"/>
  <updated>2020-11-07T15:53:20.070Z</updated>
  <id>https://example.com/</id>
  
  <author>
    <name>Jay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>10</title>
    <link href="https://example.com/2020/11/06/10/"/>
    <id>https://example.com/2020/11/06/10/</id>
    <published>2020-11-06T15:36:25.000Z</published>
    <updated>2020-11-07T15:53:20.070Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line">a = input()</span><br><span class="line">b = a[:a.find(<span class="string">&#x27;#&#x27;</span>)]  <span class="comment"># 以&quot;#&quot; 结尾，可用切片处理</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(int(str(s), <span class="number">16</span>))  <span class="comment"># 将十六进制字符串转换为十进制整数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = list(reversed(a))  <span class="comment"># reserved(seq)返回一个反转的序列, List reserve()没有返回值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, (n // <span class="number">2</span> + <span class="number">1</span>)):  <span class="comment"># &quot;/&quot;表示浮点数除法，返回浮点结果; &quot;//&quot; 表示整数除法（向下取整）</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输入为10个字符。最后一个回车表示输入结束，不算在内。    </span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:     <span class="comment"># 输入固定数目的字符</span></span><br><span class="line">    a = list(input())</span><br><span class="line">    count = count + <span class="number">1</span>  <span class="comment"># count用于统计回车字符的个数</span></span><br><span class="line">    li.extend(a)       <span class="comment"># extend()函数用于在列表末尾一次性追加另一个序列中的多个值</span></span><br><span class="line">    <span class="keyword">if</span> len(li) + count &gt; <span class="number">10</span>:  <span class="comment"># 最后一个回车表示输入结束，不算在内</span></span><br><span class="line">        count = count <span class="number">-1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">    <span class="comment"># 将输入的以空格分隔的字符先存入列表再存入列表a中，即可形成多维列表</span></span><br><span class="line">    a.append(list(map(int, input().split()))) </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">start = <span class="number">65</span></span><br><span class="line">print(<span class="string">&quot;&#123;:c&#125;&quot;</span>.format(start), end=<span class="string">&quot; &quot;</span>) <span class="comment"># 用ASCII码输出字符A</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = list(map(int, input().split()))</span><br><span class="line">b = [a[i::<span class="number">3</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]   <span class="comment"># 切片：object[start_index:end_index:step]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27; &#x27;</span>.join(result))  <span class="comment"># 把result中的元素以空格分隔输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Python join()方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</span></span><br><span class="line"><span class="string">例：   str = &quot;-&quot;</span></span><br><span class="line"><span class="string">      seq = (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span></span><br><span class="line"><span class="string">      print str.join(seq)</span></span><br><span class="line"><span class="string">输出： a-b-c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l1 = [str(i) <span class="keyword">for</span> i <span class="keyword">in</span> l]   <span class="comment"># join函数不能组合数字类型,转化为字符型</span></span><br><span class="line">print(<span class="string">&#x27; + &#x27;</span>.join(l1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dict = &#123;<span class="string">&#x27;+&#x27;</span>: <span class="string">&quot;a+b&quot;</span>, <span class="string">&#x27;-&#x27;</span>: <span class="string">&quot;a-b&quot;</span>, <span class="string">&#x27;*&#x27;</span>: <span class="string">&quot;a*b&quot;</span>, <span class="string">&#x27;/&#x27;</span>: <span class="string">&quot;a/b&quot;</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.format(eval(dict[op])))   <span class="comment"># eval()函数用来执行一个字符串表达式，并返回表达式的值</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">print(*s, sep=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">end：可以设置print打印结束时最后跟的字符形式。</span></span><br><span class="line"><span class="string">sep：可以设置print中分隔不同值的形式</span></span><br><span class="line"><span class="string">本题中两者的区别是最后一个输出后，后面是否有空格</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> age:</span><br><span class="line">    dic[i] = dic.get(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="comment"># dic.get(key, &#x27;fault&#x27;) ,当key不存在不会抛出异常，会显示fault里的信息</span></span><br><span class="line">    <span class="comment"># dic[key], 当key不存在会抛出 KeyError 错误</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> sorted(dic):   <span class="comment"># 排序</span></span><br><span class="line">    print(<span class="string">&quot;&#123;:d&#125;:&#123;:d&#125;&quot;</span>.format(j, dic[j]))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot; &quot;</span>.join(map(str, li2)))  <span class="comment"># join()方法不能处理数字型数据，先将列表中每一个元素转换为字符型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eval()函数常见作用有：</span><br><span class="line"><span class="number">1</span>、计算字符串中有效的表达式，并返回结果</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">&#x27;pow(2,2)&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">&#x27;2 + 2&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span>、将字符串转成相应的对象（如list、tuple、dict和string之间的转换）</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;[[1,2], [3,4], [5,6], [7,8], [9,0]]&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = eval(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;&#123;1:&#x27;xx&#x27;,2:&#x27;yy&#x27;&#125;&quot;</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = eval(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;xx&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;yy&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 比如输入字典input():&#123;1:&#x27;xx&#x27;,2:&#x27;yy&#x27;&#125;,默认为字符型：&quot;&#123;1:&#x27;xx&#x27;,2:&#x27;yy&#x27;&#125;&quot;,可利用这种方法转化为字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;(1,2,3,4)&quot;</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = eval(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = eval(input())</span><br><span class="line">b = eval(input())</span><br><span class="line"><span class="comment"># 字典合并</span></span><br><span class="line">c = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a: </span><br><span class="line">    c[i] = b.get(i, <span class="number">0</span>) + a[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> c.keys():</span><br><span class="line">        c[i] = b[i]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典排序</span></span><br><span class="line">d = dict(sorted(c.items(), key=<span class="keyword">lambda</span> c: c[<span class="number">0</span>] <span class="keyword">if</span> type(c[<span class="number">0</span>])==int <span class="keyword">else</span> ord(c[<span class="number">0</span>])))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">sorted(dict.items(), key=lambda e:e[0], reverse=False)</span></span><br><span class="line"><span class="string">里面三个参数</span></span><br><span class="line"><span class="string">dict.items()  # 可迭代元素。</span></span><br><span class="line"><span class="string">key= lambda d:d[0]  # d[0]表示按键，d[1]表示按值。</span></span><br><span class="line"><span class="string">reverse  # 默认是False，升序排列。当值为True时是降序排列。</span></span><br><span class="line"><span class="string">返回的是一个列表，列表中是排列后的元组。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ord()函数以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s = set() #定义一个空集合 </span></span><br><span class="line"><span class="string">d = &#123;&#125;  # 定义一个空字典</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">集合的添加有两种常用方法，分别是add和update。</span></span><br><span class="line"><span class="string">集合add方法：是把要传入的元素做为一个整个添加到集合中，例如：</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a = set(&#x27;boy&#x27;)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a.add(&#x27;python&#x27;)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a</span></span><br><span class="line"><span class="string">set([&#x27;y&#x27;, &#x27;python&#x27;, &#x27;b&#x27;, &#x27;o&#x27;])</span></span><br><span class="line"><span class="string">集合update方法：是把要传入的元素拆分，做为个体传入到集合中，例如：</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a = set(&#x27;boy&#x27;)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a.update(&#x27;python&#x27;)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a</span></span><br><span class="line"><span class="string">set([&#x27;b&#x27;, &#x27;h&#x27;, &#x27;o&#x27;, &#x27;n&#x27;, &#x27;p&#x27;, &#x27;t&#x27;, &#x27;y&#x27;])</span></span><br><span class="line"><span class="string">集合删除操作方法：remove</span></span><br><span class="line"><span class="string">set([&#x27;y&#x27;, &#x27;python&#x27;, &#x27;b&#x27;, &#x27;o&#x27;])</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a.remove(&#x27;python&#x27;)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a</span></span><br><span class="line"><span class="string">set([&#x27;y&#x27;, &#x27;b&#x27;, &#x27;o&#x27;])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">isinstance() 与 type() 区别：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">type() 不会认为子类是一种父类类型，不考虑继承关系。</span></span><br><span class="line"><span class="string">isinstance() 会认为子类是一种父类类型，考虑继承关系。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果要判断两个类型是否相同推荐使用 isinstance()。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">语法</span></span><br><span class="line"><span class="string">以下是 isinstance() 方法的语法:</span></span><br><span class="line"><span class="string">isinstance(object, classinfo)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对于基本类型来说 classinfo 可以是：</span></span><br><span class="line"><span class="string">int，float，bool，complex，str(字符串)，list，dict(字典)，set，tuple</span></span><br><span class="line"><span class="string">要注意的是，classinfo 的字符串是 str 而不是 string，字典也是简写 dict。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(1)</span></span><br><span class="line"><span class="string">Python isalnum() 方法检测字符串是否由字母和数字组成。</span></span><br><span class="line"><span class="string">str.isalnum()，如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt;str = &quot;this2009&quot;   # 字符中没有空格</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;print(str.isalnum())</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;str = &quot;this is string example....wow!!!&quot;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;print(str.isalnum())</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(2)</span></span><br><span class="line"><span class="string">str.strip([chars])</span></span><br><span class="line"><span class="string">chars -- 指定删除的字符（默认为空格）</span></span><br><span class="line"><span class="string">当chars不为空时，函数会被chars解成一个个的字符，然后将这些字符去掉。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>str2 = &#x27;1a2b12c21&#x27;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>str2.strip(&#x27;12&#x27;) #删除头尾的1和2</span></span><br><span class="line"><span class="string">&#x27;a2b12c&#x27;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>str2.lstrip(&#x27;12&#x27;) #删除开头的1和2</span></span><br><span class="line"><span class="string">&#x27;a2b12c21&#x27;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>str2.rstrip(&#x27;12&#x27;) #删除结尾的1和2</span></span><br><span class="line"><span class="string">&#x27;1a2b12c&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(3)</span></span><br><span class="line"><span class="string">Python split()通过指定分隔符对字符串进行切片,返回分割后的字符串列表(返回的是列表)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sorted 方法返回的是一个新的 list,而不是在原来的基础上进行的操作</span></span><br><span class="line">ans  = sorted(counts.items(), key=<span class="keyword">lambda</span> x:(-x[<span class="number">1</span>], x[<span class="number">0</span>]))</span><br><span class="line"><span class="comment"># 先按照value(x[1])值降序排列(&#x27;-&#x27;代表降序),value相同的,再按照key(x[0])值升序排列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sys.stdin 标准输入</span></span><br><span class="line"><span class="comment"># sys.stdout 标准输出</span></span><br><span class="line"><span class="comment"># sys.stderr 标准错误输出</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构(2)--表</title>
    <link href="https://example.com/2020/11/03/8/"/>
    <id>https://example.com/2020/11/03/8/</id>
    <published>2020-11-03T11:14:32.000Z</published>
    <updated>2020-11-10T08:18:36.251Z</updated>
    
    <content type="html"><![CDATA[<p>我们将处理一般的形如A1，A2，A3，….. ,$A_N$的表。我们说这个表的大小是N，称大小为0的表为空表。</p><p>对于除空表以外的任何表，我们说A<sub>i+1</sub>后继A<sub>i</sub>并称A<sub>i-1</sub>前驱A<sub>i</sub>。PrintList和MakeEmpty是对表进行的常见的操作，其功能显而易见；Find返回关键字首次出现的位置；Insert和Delete从表的某个位置插入和删除某个关键字；FindKth则返回某个位置上（作为参数被指定）的元素。对表的所有操作都可以通过使用数组来实现，但插入和删除的花费是昂贵的，比如要在位置0插入，需要整个数组后移一个位置，而删除第一个元素则需要将表中所有元素前移一个位置。因为插入和删除运行时间如此慢且表的大小必须提前已知以确定数组大小，所以简单数组一般不用来实现这种结构。</p><p>链表是线性表的一种，由一系列节点（结点）组成，每个节点包含一个数据域和一个指向下一个节点的指针域。链表结构可以克服数组需要预先知道数据大小的缺点，而且插入和删除元素很方便，但是失去数组随机读取的优点。链表有很多种不同类型：单向链表，双向链表和循环链表。</p><h3 id="1-单向链表"><a href="#1-单向链表" class="headerlink" title="1. 单向链表"></a>1. 单向链表</h3><p>(1) 下图给出了链表的一般想法：</p><p><img src="/2020/11/03/8/8-1.png" alt="一个链表" style="zoom: 50%;"></p><p>为了执行PrintList(L)或Find(L , Key)，我们只要将一个指针传递到代表的第一个元素，然后用一些Next指针穿越该链表即可。删除命令可以通过修改一个指针来实现，如下图：</p><p><img src="/2020/11/03/8/8-2.png" alt="从链表中删除元素" style="zoom:50%;"></p><p>插入命令需要使用一次malloc调用从系统得到一个新单元，并执行两次指针调整。如下图：</p><p><img src="/2020/11/03/8/8-3.png" alt="向链表插入元素" style="zoom:50%;"></p><p>(2) 利用上面的方法还会有几种可能的问题，第一：并不存在从所给定义出发在表的前面插入元素的真正显性的方法。第二：从表的前面实行删除是一个特殊情况，因为它改变了表的起始端。第三个问题涉及一般的删除，虽然上述指针的移动很简单，但是删除算法要求我们记住被删除元素前面的表元。</p><p>为了解决以上问题，我们将留出一个标志结点，称之为<strong>表头</strong>，表头在位置0处，如下图：</p><p><img src="/2020/11/03/8/8-4.png" alt="带表头的链表" style="zoom:50%;"></p><p>作为例子，我们将把这些表ADT的一些例程编写出来：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在链表中第一个节点叫头节点(如果有头节点）头节点不存放有效信息，是为了方便链表的删除和插入操作，</span></span><br><span class="line"><span class="comment">// 第一个有效节点叫首节点，最后一个节点叫尾节点。</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结点声明</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType Element;</span><br><span class="line">    Position Next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(1)测试空表</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(List L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L-&gt;Next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(2)测试当前元素是否是表的最后一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsLast</span><span class="params">(List L, Position P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> P-&gt;Next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(3)Find例程</span></span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X, List L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position P;</span><br><span class="line">    P = L-&gt;Next;</span><br><span class="line">    <span class="keyword">while</span>(P != <span class="literal">NULL</span> &amp;&amp; P-&gt;Element != X)</span><br><span class="line">    &#123;</span><br><span class="line">        P = P-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(4)FindPrevious例程</span></span><br><span class="line"><span class="function">Position <span class="title">FindPrevious</span><span class="params">(List L,ElementType X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position P;</span><br><span class="line">    P = L-&gt;Next;</span><br><span class="line">    <span class="keyword">while</span>(P-&gt;Next != <span class="literal">NULL</span> &amp;&amp; P-&gt;Next-&gt;Element != X)</span><br><span class="line">    &#123;</span><br><span class="line">        P = P-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(5)链表的删除例程(如果X出现不止一次，删除第一次出现的X,如果X不在表中，什么也不做)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(List L, ElementType X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position P,T;</span><br><span class="line">    p = FindPrevious(L, X);  <span class="comment">//前驱</span></span><br><span class="line">    <span class="keyword">if</span>(!IsLast(L, P))</span><br><span class="line">    &#123;</span><br><span class="line">        T = P-&gt;Next;</span><br><span class="line">        P-&gt;Next = T-&gt;Next;</span><br><span class="line">        <span class="built_in">free</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(6)链表的插入例程(在位置P后插入)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(ElementType X, List L, Position P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position T,Pre;</span><br><span class="line">    T = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        FatalError(<span class="string">&quot;Out ofspace!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    T-&gt;Element = X;</span><br><span class="line">    T-&gt;Next = P-&gt;Next;</span><br><span class="line">    P-&gt;Next = T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(7)删除表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteList</span><span class="params">(List L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position P,T；</span><br><span class="line">    P = L-&gt;Next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        T = P-&gt;Next;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        P = T;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;Next = <span class="literal">NULL</span>; <span class="comment">//清除头结点的next指针指向的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-双向链表"><a href="#2-双向链表" class="headerlink" title="2. 双向链表"></a>2. 双向链表</h3><p>双向链表的每一个节点都有两个指针域，一个前驱指针，指向前一个节点，头节点的前驱指针为NULL,一个后继指针，指向后一个节点，尾节点的后继指针为NULL。双向链表可以从任一个节点开始访问到前后节点，不像单链表只能向前。</p><p><img src="/2020/11/03/8/8-5.png" alt="双向链表" style="zoom:50%;"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结点声明</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType Element;</span><br><span class="line">    Position Next;</span><br><span class="line">    Position Prior;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(1)双向链表的删除例程(如果X出现不止一次，删除第一次出现的X,如果X不在表中，什么也不做)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(List L, ElementType X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position P,T;</span><br><span class="line">    p = L-&gt;Next;</span><br><span class="line">    <span class="keyword">while</span>(P != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(P-&gt;Element == X)</span><br><span class="line">        &#123;</span><br><span class="line">            P-&gt;Next-&gt;Prior = P-&gt;Prior;</span><br><span class="line">            P-&gt;Prior-&gt;Next = P-&gt;Next;</span><br><span class="line">            Free(P);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        P = P-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(2)双向链表的插入例程(在位置P处插入)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(ElementType X, List L, Position P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position T,Pre;</span><br><span class="line">    T = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        FatalError(<span class="string">&quot;Out ofspace!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    T-&gt;Element = X;</span><br><span class="line">    P-&gt;Prior-&gt;Next = T;</span><br><span class="line">    T-&gt;Prior = P-&gt;Prior;</span><br><span class="line">    T-&gt;Next = P;</span><br><span class="line">    P-&gt;Prior = T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-循环链表"><a href="#3-循环链表" class="headerlink" title="3. 循环链表"></a>3. 循环链表</h3><p>(1) 单向循环链表就是让尾节点的指针域不再是NULL,而是指向头节点从而形成一个环。循环链表与单链表的操作没有多少差别，只是判断链表是否空应该是 <strong>head-&gt;next == head</strong>。</p><p><img src="/2020/11/03/8/8-6.png" alt="单向循环链表" style="zoom:50%;"></p><p>(2) 双向循环链表是基于双向链表的基础上实现的，和双向链表的操作差不多，唯一的区别就是它是个循环的链表，通过每个节点的两个指针把它们扣在一起组成一个环状。所以呢，每个节点都有前驱节点和后继节点（包括头节点和尾节点）这是和双向链表不同的地方，如下图：</p><p><img src="/2020/11/03/8/8-7.png" alt="双向循环链表" style="zoom:50%;"></p><h3 id="4-程序举例"><a href="#4-程序举例" class="headerlink" title="4. 程序举例"></a>4. 程序举例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">两个多项式相加的运算规则很简单，对所有指数相同的项，将其对应系数相加，若和不为零，则构成和多项式中的一项；将所有指数不相同的项复制到和多项式中。我们采用把一个多项式归并入另一个多项式的方法。即将A+B的和多项式存储到A中(采用循环链表)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">pnode</span>//用链表来存储多项式信息</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">float</span> coef;<span class="comment">//多项式系数</span></span><br><span class="line"><span class="keyword">int</span>   <span class="built_in">exp</span>;<span class="comment">//多项式指数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pnode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;polynode;</span><br><span class="line"></span><br><span class="line"><span class="function">polynode *<span class="title">Create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> coef;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">exp</span>;</span><br><span class="line">polynode *head,*s,*r;</span><br><span class="line">head=(polynode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(polynode));</span><br><span class="line">head-&gt;coef=<span class="number">0</span>;</span><br><span class="line">head-&gt;<span class="built_in">exp</span>=<span class="number">-1</span>;</span><br><span class="line">r=head;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入各项的系数和指数：\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f %d&quot;</span>,&amp;coef,&amp;<span class="built_in">exp</span>);</span><br><span class="line"><span class="keyword">if</span>(coef!=<span class="number">0</span>)<span class="comment">//输入0 0来结束输入</span></span><br><span class="line">&#123;</span><br><span class="line">s=(polynode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(polynode));</span><br><span class="line">s-&gt;coef=coef;<span class="comment">//s用来保存当前节点</span></span><br><span class="line">s-&gt;<span class="built_in">exp</span>=<span class="built_in">exp</span>;</span><br><span class="line">r-&gt;next=s;</span><br><span class="line">r=s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">r-&gt;next=head;<span class="comment">//构造循环链表</span></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">polynode*<span class="title">PolyAdd</span><span class="params">(polynode* pa,polynode* pb)</span><span class="comment">//进行多项式相加</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">polynode *p,*q,*r,*s;</span><br><span class="line"><span class="keyword">float</span> x;</span><br><span class="line">p=pa-&gt;next;<span class="comment">//分别指向多项式的第一项</span></span><br><span class="line">q=pb-&gt;next;</span><br><span class="line">s=pa;<span class="comment">//s用于保存当前节点</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>((p!=pa)&amp;&amp;(q!=pb))<span class="comment">//没有结束，回到链表头</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;<span class="built_in">exp</span>&lt;q-&gt;<span class="built_in">exp</span>)<span class="comment">//p的指数小于q的指数，将p放入链表中</span></span><br><span class="line">&#123;</span><br><span class="line">s=p;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;<span class="built_in">exp</span>&gt;q-&gt;<span class="built_in">exp</span>)<span class="comment">//p的指数大于q的指数，将q放入链表中</span></span><br><span class="line">&#123;</span><br><span class="line">r=q-&gt;next;</span><br><span class="line">q-&gt;next=p;</span><br><span class="line">s-&gt;next=q;</span><br><span class="line">s=q;</span><br><span class="line">q=r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//当两者指数相同时，进行合并</span></span><br><span class="line">&#123;</span><br><span class="line">x=p-&gt;coef+q-&gt;coef;</span><br><span class="line"><span class="keyword">if</span>(x!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;coef=x;</span><br><span class="line">s=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//若合并结果为0，将该节点移除</span></span><br><span class="line">&#123;</span><br><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">p=s-&gt;next;</span><br><span class="line">q=q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(q!=pb)<span class="comment">//如果多项式b的项数少于多项式a的情况</span></span><br><span class="line">&#123;</span><br><span class="line">r=q;</span><br><span class="line"><span class="keyword">while</span>(r-&gt;next!=pb)</span><br><span class="line">&#123; </span><br><span class="line">   r=r-&gt;next;</span><br><span class="line">&#125; </span><br><span class="line">s-&gt;next=q;</span><br><span class="line">r-&gt;next=pa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pa;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(polynode *head)</span><span class="comment">// 输出多项式信息</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">polynode *p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;多项式为：&quot;</span>);</span><br><span class="line">p=head-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p!=head)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next==head)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.1fx^%d&quot;</span>,p-&gt;coef,p-&gt;<span class="built_in">exp</span>);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.1fx^%d + &quot;</span>,p-&gt;coef,p-&gt;<span class="built_in">exp</span>);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">polynode *ha,*hb;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n建立多项式A:&quot;</span>);</span><br><span class="line">ha=Create();</span><br><span class="line">Output(ha);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n建立多项式B:&quot;</span>);</span><br><span class="line">hb=Create();</span><br><span class="line">Output(hb);</span><br><span class="line"> </span><br><span class="line">ha=PolyAdd(ha,hb);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n多项式A+B：&quot;</span>);</span><br><span class="line">    Output(ha);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们将处理一般的形如A1，A2，A3，….. ,$A_N$的表。我们说这个表的大小是N，称大小为0的表为空表。&lt;/p&gt;
&lt;p&gt;对于除空表以外的任何表，我们说A&lt;sub&gt;i+1&lt;/sub&gt;后继A&lt;sub&gt;i&lt;/sub&gt;并称A&lt;sub&gt;i-1&lt;/sub&gt;前驱A&lt;sub&gt;i&lt;/s</summary>
      
    
    
    
    
    <category term="数据结构" scheme="https://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构(1)--基础知识与算法分析</title>
    <link href="https://example.com/2020/11/02/7/"/>
    <id>https://example.com/2020/11/02/7/</id>
    <published>2020-11-02T02:43:12.000Z</published>
    <updated>2020-11-03T11:13:18.481Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构主要研究组织大量数据的方法，而算法分析则是对算法运行时间的评估。通过在实际编程之前对算法的分析，以决定一个特定的解法是否可行。一旦解法被确定，程序还是必须要编写的，随着计算机的日益强大，它们必须解决的问题就变得更加巨大和复杂，这就要求开发更加复杂的程序。只有具备良好的程序设计技巧和算法分析能力，才能开发出具有高效率的程序。从这篇文章开始，我们将主要以C为程序设计语言来学习数据结构与算法分析知识，首先我们会学习递归和算法分析的问题。</p><h3 id="1-递归简单介绍"><a href="#1-递归简单介绍" class="headerlink" title="1. 递归简单介绍"></a>1. 递归简单介绍</h3><p>当一个函数用自身来定义时就称为是递归的。例如，可以在非负整数集上定义一个函数 <em>f</em>，它满足 <em>f</em>(0) = 0 且 <em>f</em> (x) = 2 <em>f</em>(x-1) + x<sup>2</sup> , 下面给出了函数 <em>f</em> 的递归实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个递归函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * f(x<span class="number">-1</span>) + x * x; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当编写递归例程的时候，关键要牢记递归的四条基本准则：</p><p>(1) <strong>基准情形</strong>：必须总有某些基准情形不用递归就能求解。</p><p>(2)<strong>不断推进</strong>：对于那些需要递归求解的情形，递归调用必须总能朝着基准情形的方向推进。</p><p>(3)<strong>设计法则</strong>：假设所有的递归调用都能运行。</p><p>(4)<strong>合成效益法则</strong>：在求解一个问题的同一实例时，切勿在不同的递归调用中做重复性的动作。(使用递归计算诸如斐波那契数之类简单数学函数的值一般来说不是一个好主意)。</p><h3 id="2-参数传递"><a href="#2-参数传递" class="headerlink" title="2. 参数传递"></a>2. 参数传递</h3><p>包括C和 Java在内的许多编程语言都是使用按值调用来传递参数的，即将实参复制给形参。但在C++中，参数有可能是大的复杂对象，导致复制的效率很低，另外有时候又需要改变被传递的值，对此，C++有三种不同的方式来传递参数：</p><p>double avg(const vector&lt; int&gt; &amp;arr , int n , bool &amp; errorFlag) ;</p><p>上面的函数声明了这三种参数传递机制，该函数返回arr中前n个数的平均值，如果n大于arr.size( )或者小于1，就设定errorFlag为true：</p><p>这里，arr和不会被avg所改变，arr是vector&lt; int&gt;类型的，对其进行复制耗费巨大，使用<strong>按常量引用调用</strong>来传递；n是int型的，对其进行复制消耗很小，通过<strong>按值调用</strong>来传递；errorFlag是bool类型的，新值返回到实参中，使用<strong>引址调用</strong>来传递。</p><p>参数传递选项总结如下：</p><p>(1) 按值调用适用于不被函数更改的小对象</p><p>(2) 按常量引用调用适用于不被函数更改的大对象</p><p>(3) 引址调用适用于所有可以被函数更改的对象</p><h3 id="3-算法分析"><a href="#3-算法分析" class="headerlink" title="3. 算法分析"></a>3. 算法分析</h3><p>对于一个问题，一旦给定某种算法并且确定其是正确的，那么重要的一步就是确定该算法将需要多少诸如时间或空间等资源量的问题。一般来说要分析的最重要的资源是最坏情况下的运行时间，分析的结果为程序在一定的时间范围内能够终止运行提供了保障，程序可能提前结束，但绝不可能延后。</p><p>一些简单的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1)求和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,s;</span><br><span class="line">    s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s +=  i * i * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">声明不计时间，第五行和第十行各占1个时间单元，第8行每执行一次占用四个时间单元(两次乘法，一次加法，一次赋值),</span></span><br><span class="line"><span class="comment">执行n次共占用4n个时间单元，第六行初始化1个时间单元，所有的测试n+1个时间单元，自增运算n个时间单元，</span></span><br><span class="line"><span class="comment">总计6n+4个时间单元，因此，我们说该函数是O(n);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(2)最大子序列和问题</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int max(const int A[],int N)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int i,sum,j;</span></span><br><span class="line"><span class="comment">    int thissum = 0;</span></span><br><span class="line"><span class="comment">    for(i = 0,i &lt; N;i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        sum = 0;</span></span><br><span class="line"><span class="comment">        for(j = i;j &lt; N;j++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            sum = sum + A[j];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(sum &gt; thissum)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            thissum = sum;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return thissum;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> A[],<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,sum;</span><br><span class="line">    <span class="keyword">int</span> thissum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>,i &lt; N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum + A[j];</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; thissum)</span><br><span class="line">        &#123;</span><br><span class="line">            thissum = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)  <span class="comment">//任何负的子序列不可能是最优子序列的前缀</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> thissum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一种O(N平方) ，第二种O(N)</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(3)二分搜索</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">const</span> ElementType A[],<span class="keyword">int</span> x, <span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>,high = N - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid] &lt; x)</span><br><span class="line">        &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[mid] &gt; x)</span><br><span class="line">        &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果一个算法用常数时间(O(1))将问题的大小削减为其一部分(通常是1/2)，那么该算法就是O(logN)的。</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(4)欧几里得算法(计算最大公因数)</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> m,<span class="keyword">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> rem = m % n;</span><br><span class="line">        m = n;</span><br><span class="line">        n = rem;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// O(logN)</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(5)幂运算</span></span><br><span class="line"><span class="comment">//如果N是偶数，则X^N = (x^2)^(N/2),如果N是奇数，X^N = (x^2)^(N/2)*x;</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">pow</span><span class="params">(<span class="keyword">long</span> x,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(x * x,n/<span class="number">2</span>);  <span class="comment">//递归</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(x * x,n/<span class="number">2</span>) * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// O(logN)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数据结构主要研究组织大量数据的方法，而算法分析则是对算法运行时间的评估。通过在实际编程之前对算法的分析，以决定一个特定的解法是否可行。一旦解法被确定，程序还是必须要编写的，随着计算机的日益强大，它们必须解决的问题就变得更加巨大和复杂，这就要求开发更加复杂的程序。只有具备良好</summary>
      
    
    
    
    
    <category term="数据结构" scheme="https://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C++ STL</title>
    <link href="https://example.com/2020/10/27/6/"/>
    <id>https://example.com/2020/10/27/6/</id>
    <published>2020-10-26T16:00:00.000Z</published>
    <updated>2020-10-29T14:49:19.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-STL简介"><a href="#1-STL简介" class="headerlink" title="1. STL简介"></a>1. STL简介</h2><p>C++ STL（标准模板库）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈。</p><p>STL的代码广义上讲分为三类：algorithm(算法)、container(容器)、和iterator(迭代器)，几乎所有的代码都采用了模板类和模版函数的方式，这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。在C++标准中，STL被组织为下面的13个头文件：</p><p> &lt; algorithm&gt;、&lt; deque&gt;、&lt; functional&gt;、&lt; iterator&gt;、&lt; vector&gt;、&lt; list&gt;、&lt; map&gt;、&lt; memory&gt;、&lt; numeric&gt;、&lt; queue&gt;、&lt; set&gt;、&lt; stack&gt;和&lt; utility&gt;。 </p><h2 id="2-容器"><a href="#2-容器" class="headerlink" title="2. 容器"></a>2. 容器</h2><p>在实际的开发过程中，数据结构本身的重要性不会逊于操作于数据结构的算法的重要性，当程序中存在着对时间要求很高的部分时，数据结构的选择就显得更加重要。经典的数据结构数量有限，但是我们常常重复着一些为了实现向量、链表等结构而编写的代码，这些代码都十分相似，只是为了适应不同数据的变化而在细节上有所出入。STL容器就为我们提供了这样的方便，它允许我们重复利用已有的实现构造自己的特定类型下的数据结构，通过设置一些模版类，STL容器对最常用的数据结构提供了支持，这些模板的参数允许我们指定容器中元素的数据类型，可以将我们许多重复而乏味的工作简化。</p><p>容器部分主要由头文件&lt; vector&gt;,&lt; list&gt;,&lt; deque&gt;,&lt; set&gt;,&lt; map&gt;,&lt; stack&gt;和&lt; queue&gt;组成。</p><h2 id="3-算法"><a href="#3-算法" class="headerlink" title="3. 算法"></a>3. 算法</h2><p>算法作用于容器。它们提供了执行各种操作的方式，包括对容器内容执行初始化、排序、搜索和转换等操作。STL提供了大约100个实现算法的模版函数，比如算法for_each将为指定序列中的每一个元素调用指定的函数，stable_sort以你所指定的规则对序列进行稳定性排序等等。这样一来，只要我们熟悉了STL之后，许多代码可以被大大的化简，只需要通过调用一两个算法模板，就可以完成所需要的功能并大大地提升效率。</p><p> 算法部分主要由头文件&lt; algorithm&gt;，&lt; numeric&gt;和&lt; functional&gt;组成。</p><p>&lt; algorithm&gt;是所有STL头文件中最大的一个（尽管它很好理解），它是由一大堆模版函数组成的，可以认为每个函数在很大程度上都是独立的，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、移除、反转、排序、合并等等。</p><p>&lt; numeric&gt;体积很小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。</p><p>&lt; functional&gt;中则定义了一些模板类，用以声明函数对象。</p><h2 id="4-迭代器"><a href="#4-迭代器" class="headerlink" title="4. 迭代器"></a>4. 迭代器</h2><p>概括来说，迭代器在STL中用来将算法和容器联系起来，起着一种黏和剂的作用。几乎STL提供的所有算法都是通过迭代器存取元素序列进行工作的，每一个容器都定义了其本身所专有的迭代器，用以存取容器中的元素。</p><p> 迭代器部分主要由头文件&lt; utility&gt;,&lt; iterator&gt;和&lt; memory&gt;组成。</p><p>&lt; utility&gt;是一个很小的头文件，它包括了贯穿使用在STL中的几个模板的声明。</p><p>&lt; iterator&gt;中提供了迭代器使用的许多方法，而对于&lt; memory&gt;的描述则十分的困难，它以不同寻常的方式为容器中的元素分配存储空间，同时也为某些算法执行期间产生的临时对象提供机制,&lt; memory&gt;中的主要部分是模板类allocator，它负责产生所有容器中的默认分配器。</p><h2 id="5-程序举例"><a href="#5-程序举例" class="headerlink" title="5. 程序举例"></a>5. 程序举例</h2><h3 id="迭代器（iterator）"><a href="#迭代器（iterator）" class="headerlink" title="迭代器（iterator）"></a>迭代器（iterator）</h3><p>　　把所有和迭代有关的东西给抽象出来的，不管是数组的下标，指针，for里面的、list里面的、vector里面的，抽象一下变成了iterator：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;numeric&gt; // (&lt;numeric&gt; accumulate) </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt; // (&lt;algorithm&gt; reverse)</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it =v.begin(); it!=v.end(); it++) <span class="comment">//end()永远指向最后一个元素的下一个 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// accumulate(v.begin(),v.end(),0),把从v.begin()开始到v.end()结束所有的元素加到0上面去 </span></span><br><span class="line"><span class="keyword">int</span> sum=accumulate(v.begin(),v.end(),<span class="number">0</span>); </span><br><span class="line">reverse(v.begin(),v.end());  <span class="comment">// 数组转置 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it =v.begin(); it!=v.end(); it++) <span class="comment">//end()永远指向最后一个元素的下一个 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/10/27/6/6-1.png" alt="1" style="zoom: 80%;"></p><h3 id="vector（动态数组）"><a href="#vector（动态数组）" class="headerlink" title="vector（动态数组）"></a>vector（动态数组）</h3><p>　　vector有内存管理的机制，也就是说对于插入和删除，vector可以动态调整所占用的内存空间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort函数根据comp函数进行判断输的大小，系统默认a&lt;b时返回真，于是从小到大排，</span></span><br><span class="line"><span class="comment">// 这里comp函数设定为a&gt;b时返回为真，那么最终得到的排序结果也相应的从小到大变成从大到小</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Comp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a,<span class="keyword">const</span> <span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.push_back(<span class="number">3</span>); <span class="comment">//数组尾部插入3</span></span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line">v.push_back(<span class="number">1</span>);</span><br><span class="line">v.push_back(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=v.begin(); it!=v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// insert begin()+n 是在第n+1个元素之前插入</span></span><br><span class="line"><span class="comment">// insert end()-n  是在倒数第n+1个元素之后插入</span></span><br><span class="line">v.insert(v.end()<span class="number">-1</span>,<span class="number">111</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=v.begin(); it!=v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">sort(v.begin(),v.end()); <span class="comment">// 默认升序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=v.begin(); it!=v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">sort(v.begin(),v.end(),Comp); <span class="comment">// 用降序，需自己定义一个降序函数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=v.begin(); it!=v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">v.erase(v.begin()+<span class="number">1</span>);  <span class="comment">//删除第二个元素 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=v.begin(); it!=v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">v.erase(v.begin(),v.begin()+<span class="number">3</span>);  <span class="comment">// 删除第一个到第三个元素 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=v.begin(); it!=v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">v.clear(); <span class="comment">// 全部删除 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=v.begin(); it!=v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　                                  <img src="/2020/10/27/6/6-2.png" alt="2" style="zoom: 67%;"></p><h3 id="set容器"><a href="#set容器" class="headerlink" title="set容器"></a>set容器</h3><p>　　set是用红黑树的平衡二叉索引树的数据结构来实现的，插入时，它会自动调节二叉树排列，把元素放到适合的位置，确保每个子树根节点的键值大于左子树所有的值、小于右子树所有的值，插入重复数据时会忽略。set迭代器采用中序遍历，检索效率高于vector、deque、list，并且会将元素按照升序的序列遍历。set容器中的数值，一经更改，set会根据新值旋转二叉树，以保证平衡，构建set就是为了快速检索（python中的set一旦建立就是一个常量，不能改的）。</p><p><img src="/2020/10/27/6/6-3.png" alt="3" style="zoom:67%;"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    v.insert(<span class="number">1</span>);</span><br><span class="line">    v.insert(<span class="number">3</span>);</span><br><span class="line">    v.insert(<span class="number">5</span>);</span><br><span class="line">    v.insert(<span class="number">2</span>);</span><br><span class="line">    v.insert(<span class="number">4</span>);</span><br><span class="line">    v.insert(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 正反遍历，迭代器iterator、reverse_iterator</span></span><br><span class="line">    <span class="comment">// 中序遍历 升序遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); ++it)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator rit = v.rbegin(); rit != v.rend(); ++rit)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *rit &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/10/27/6/6-4.png" alt="4"></p><p> multiset与set的不同之处就是键值可以重复，以及erase（key）的时候会删除multiset里面所有的key并且返回删除的个数。</p><p><img src="/2020/10/27/6/6-5.png" alt="5" style="zoom:67%;"></p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>　　map也是使用红黑树，他是一个键值对（key：value映射），遍历时依然默认按照key升序的方式遍历，同set</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">double</span>&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明即插入</span></span><br><span class="line">    m[<span class="string">&quot;li&quot;</span>] = <span class="number">123.4</span>;</span><br><span class="line">    m[<span class="string">&quot;wang&quot;</span>] = <span class="number">23.1</span>;</span><br><span class="line">    m[<span class="string">&quot;zhang&quot;</span>] = <span class="number">-21.9</span>;</span><br><span class="line">    m[<span class="string">&quot;abc&quot;</span>] = <span class="number">12.1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">double</span>&gt;::iterator it = m.begin(); it != m.end(); ++it)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//first --&gt; key second --&gt; value</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; (*it).second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/10/27/6/6-6.png" alt="6" style="zoom:80%;"></p><h3 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h3><p>　　multimap由于允许有重复的元素，所以元素插入、删除、查找都与map不同。</p><p>　　插入insert（pair<a,b>(value1,value2)）</a,b></p><p>​       至于删除和查找，erase（key）会删除掉所有key的map，查找find（key）返回第一个key的迭代器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">multimap</span>&lt;<span class="built_in">string</span>,<span class="keyword">double</span>&gt; m;</span><br><span class="line"></span><br><span class="line">    m.insert(<span class="built_in">pair</span>&lt;<span class="built_in">string</span>,<span class="keyword">double</span>&gt;(<span class="string">&quot;Abc&quot;</span>,<span class="number">123.2</span>));</span><br><span class="line">    m.insert(<span class="built_in">pair</span>&lt;<span class="built_in">string</span>,<span class="keyword">double</span>&gt;(<span class="string">&quot;Abc&quot;</span>,<span class="number">123.2</span>));</span><br><span class="line">    m.insert(<span class="built_in">pair</span>&lt;<span class="built_in">string</span>,<span class="keyword">double</span>&gt;(<span class="string">&quot;xyz&quot;</span>,<span class="number">-43.2</span>));</span><br><span class="line">    m.insert(<span class="built_in">pair</span>&lt;<span class="built_in">string</span>,<span class="keyword">double</span>&gt;(<span class="string">&quot;dew&quot;</span>,<span class="number">43.2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">multimap</span>&lt;<span class="built_in">string</span>,<span class="keyword">double</span>&gt;::iterator it = m.begin(); it != m.end(); ++it )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; (*it).second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/10/27/6/6-7.png" alt="7"></p><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>　　deque和vector一样,采用线性表，与vector唯一不同的是，deque采用的分块的线性存储结构，每块大小一般为512字节，称为一个deque块，所有的deque块使用一个Map块进行管理，每个map数据项记录各个deque块的首地址，这样一来，deque块在头部和尾部都可以插入和删除元素，而不需要移动其它元素。使用push_back()方法在尾部插入元素，使用push_front()方法在首部插入元素，使用insert()方法在中间插入元素。一般来说，当考虑容器元素的内存分配策略和操作的性能时，deque相对vectore更有优势。</p><p><img src="/2020/10/27/6/6-8.png" alt="8" style="zoom:67%;"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; d;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾部插入</span></span><br><span class="line">    d.push_back(<span class="number">1</span>);</span><br><span class="line">    d.push_back(<span class="number">3</span>);</span><br><span class="line">    d.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator it = d.begin(); it != d.end(); ++it )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (*it) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//头部插入</span></span><br><span class="line">    d.push_front(<span class="number">10</span>);</span><br><span class="line">    d.push_front(<span class="number">-23</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator it = d.begin(); it != d.end(); ++it )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (*it) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    d.insert(d.begin() + <span class="number">2</span>,<span class="number">9999</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator it = d.begin(); it != d.end(); ++it )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (*it) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反方向遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator rit = d.rbegin(); rit != d.rend(); ++rit )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (*rit) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除元素pop pop_front从头部删除元素 pop_back从尾部删除元素 erase中间删除 clear全删</span></span><br><span class="line">    d.clear();</span><br><span class="line">    d.push_back(<span class="number">1</span>);</span><br><span class="line">    d.push_back(<span class="number">2</span>);</span><br><span class="line">    d.push_back(<span class="number">3</span>);</span><br><span class="line">    d.push_back(<span class="number">4</span>);</span><br><span class="line">    d.push_back(<span class="number">5</span>);</span><br><span class="line">    d.push_back(<span class="number">6</span>);</span><br><span class="line">    d.push_back(<span class="number">7</span>);</span><br><span class="line">    d.push_back(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator it = d.begin(); it != d.end(); ++it )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (*it) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    d.pop_front();</span><br><span class="line">    d.pop_front();</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator it = d.begin(); it != d.end(); ++it )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (*it) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    d.pop_back();</span><br><span class="line">    d.pop_back();</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator it = d.begin(); it != d.end(); ++it )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (*it) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    d.erase(d.begin() + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator it = d.begin(); it != d.end(); ++it )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (*it) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/10/27/6/6-9.png" alt="9" style="zoom: 67%;"></p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>　　list&lt; int&gt; l</p><p>　　插入：push_back尾部，push_front头部，insert方法前往迭代器位置处插入元素，链表自动扩张，迭代器只能使用++—操作，不能用+n -n，因为元素不是物理相连的。</p><p>　　遍历：iterator和reverse_iterator正反遍历</p><p>　　删除：pop_front删除链表首元素；pop_back()删除链表尾部元素；erase（迭代器）删除迭代器位置的元素，注意只能使用++—到达想删除的位置；remove（key） 删除链表中所有key的元素，clear( )清空链表。</p><p>　　查找：it = find(l.begin(),l.end(),key)</p><p>　　排序：l.sort()</p><p>　　删除连续重复元素 : l.unique() 【2 8 1 1 1 5 1】 —&gt; 【 2 8 1 5 1】</p><h3 id="stack（后进先出）"><a href="#stack（后进先出）" class="headerlink" title="stack（后进先出）"></a>stack（后进先出）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    s.push(<span class="number">1</span>);</span><br><span class="line">    s.push(<span class="number">2</span>);</span><br><span class="line">    s.push(<span class="number">4</span>);</span><br><span class="line">    s.push(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(s.empty() != <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/10/27/6/6-11.png" alt="11"></p><h3 id="queue（先进先出）"><a href="#queue（先进先出）" class="headerlink" title="queue（先进先出）"></a>queue（先进先出）</h3><p>queue有入队push（插入）、出队pop（删除）、读取队首元素front、读取队尾元素back、empty，size这几种方法</p><p><img src="/2020/10/27/6/6-12.png" alt="12" style="zoom:67%;"></p><h3 id="priority-queue-最大元素先出"><a href="#priority-queue-最大元素先出" class="headerlink" title="priority_queue(最大元素先出)"></a>priority_queue(最大元素先出)</h3><p>priority_queue优先队列容器与队列一样，只能从队尾插入元素，从队首删除元素，但它有一个特性，就是队列中最大的元素总是位于队首，所以出队时，并非按先进先出的原则进行，而是将当前队列中最大的元素出队，类似于给队列中的元素进行了默认以从大到小的顺序排序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>&gt; pq;</span><br><span class="line"></span><br><span class="line">    pq.push(<span class="number">1</span>);</span><br><span class="line">    pq.push(<span class="number">3</span>);</span><br><span class="line">    pq.push(<span class="number">2</span>);</span><br><span class="line">    pq.push(<span class="number">8</span>);</span><br><span class="line">    pq.push(<span class="number">9</span>);</span><br><span class="line">    pq.push(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;size: &quot;</span> &lt;&lt; pq.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(pq.empty() != <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; pq.top() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        pq.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/10/27/6/6-13.png" alt="13"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-STL简介&quot;&gt;&lt;a href=&quot;#1-STL简介&quot; class=&quot;headerlink&quot; title=&quot;1. STL简介&quot;&gt;&lt;/a&gt;1. STL简介&lt;/h2&gt;&lt;p&gt;C++ STL（标准模板库）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板</summary>
      
    
    
    
    
    <category term="C++" scheme="https://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>PTA-天梯赛练习集(1)</title>
    <link href="https://example.com/2020/10/20/5/"/>
    <id>https://example.com/2020/10/20/5/</id>
    <published>2020-10-19T16:00:00.000Z</published>
    <updated>2020-10-29T15:00:46.494Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-打印沙漏"><a href="#1-打印沙漏" class="headerlink" title="1. 打印沙漏"></a>1. 打印沙漏</h3><p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">****<span class="strong">*</span></span><br><span class="line"><span class="strong"> *</span>*<span class="strong">*</span></span><br><span class="line"><span class="strong">  *</span></span><br><span class="line"><span class="code"> ***</span></span><br><span class="line">****<span class="strong">*</span></span><br></pre></td></tr></table></figure><p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p><p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p><p><strong>输入格式：</strong>输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。</p><p><strong>输出格式：</strong>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,sum = <span class="number">1</span>,i = <span class="number">2</span>,j;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %c&quot;</span>,&amp;n,&amp;c);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum + <span class="number">2</span>*(<span class="number">2</span>*i - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;=n)</span><br><span class="line">        &#123;</span><br><span class="line">            i=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum = sum <span class="number">-2</span>*(<span class="number">2</span>*i - <span class="number">1</span>);</span><br><span class="line">            i=i<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = i;</span><br><span class="line">    <span class="keyword">for</span>(i;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = m-i;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;(<span class="number">2</span>*i<span class="number">-1</span>);j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;m+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = m-i;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;(<span class="number">2</span>*i<span class="number">-1</span>);j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n-sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-个位数统计"><a href="#2-个位数统计" class="headerlink" title="2. 个位数统计"></a>2. 个位数统计</h3><p>给定一个 <em>k</em> 位整数 ，请编写程序统计每种不同的个位数字出现的次数。例如：给定 <em>N</em>=100311，则有 2 个 0，3 个 1，和 1 个 3。</p><p><strong>输入格式：</strong>每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 <em>N</em>。</p><p><strong>输出格式：</strong>对 <em>N</em> 中每一种不同的个位数字，以 <code>D:M</code> 的格式在一行中输出该位数字 <code>D</code> 及其在 <em>N</em> 中出现的次数 <code>M</code>。要求按 <code>D</code> 的升序输出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[MAXN];</span><br><span class="line"><span class="keyword">int</span> book[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(a);i++)</span><br><span class="line">book[a[i]<span class="number">-48</span>]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(book[i]!=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; book[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-考试座位号"><a href="#3-考试座位号" class="headerlink" title="3. 考试座位号"></a>3. 考试座位号</h3><p>每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。</p><p><strong>输入格式：</strong>输入第一行给出一个正整数 <em>N</em>（≤1000），随后 <em>N</em> 行，每行给出一个考生的信息：<strong>准考证号 试机座位号 考试座位号</strong>。其中准考证号由 16 位数字组成，座位从 1 到 <em>N</em> 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。</p><p>考生信息之后，给出一个正整数 <em>M</em>（≤<em>N</em>），随后一行中给出 <em>M</em> 个待查询的试机座位号码，以空格分隔。</p><p><strong>输出格式：</strong>对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">4</span><br><span class="line">3310120150912233 2 4</span><br><span class="line">3310120150912119 4 1</span><br><span class="line">3310120150912126 1 3</span><br><span class="line">3310120150912002 3 2</span><br><span class="line">2</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">3310120150912002 2</span><br><span class="line">3310120150912119 1</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span>&#123;</span> </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">string</span> number;</span><br><span class="line">        <span class="keyword">int</span> test;</span><br><span class="line">        <span class="keyword">int</span> seat;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,m,a[<span class="number">1000</span>];</span><br><span class="line">    student s[<span class="number">1000</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s[i].number&gt;&gt;s[i].test&gt;&gt;s[i].seat;  <span class="comment">//cin可以连续从键盘读取想要的数据，以空格、enter或换行作为分隔符</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j= <span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] == s[j].test)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;s[j].number&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;s[j].seat&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//在执行cout语句时，先把插入的数据顺序存放在输出缓冲区中，</span></span><br><span class="line">                                  <span class="comment">//直到输出缓冲区满或遇到cout语句中的endl为止，此时将缓冲区中已有的数据一起输出，并清空缓冲区</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-连续因子"><a href="#4-连续因子" class="headerlink" title="4. 连续因子"></a>4. 连续因子</h3><p>一个正整数 <em>N</em> 的因子中可能存在若干连续的数字。例如 630 可以分解为 3×5×6×7，其中 5、6、7 就是 3 个连续的数字。给定任一正整数 <em>N</em>，要求编写程序求出最长连续因子的个数，并输出最小的连续因子序列。</p><p><strong>输入格式：</strong>输入在一行中给出一个正整数 <em>N</em></p><p><strong>输出格式：</strong>首先在第 1 行输出最长连续因子的个数；然后在第 2 行中按 <code>因子1*因子2*……*因子k</code> 的格式输出最小的连续因子序列，其中因子按递增顺序输出，1 不算在内。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N;   <span class="comment">//输入所求的数字 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;    <span class="comment">//计数器 </span></span><br><span class="line"><span class="keyword">int</span> start=<span class="number">0</span>;    <span class="comment">//标记起始位置 </span></span><br><span class="line"><span class="keyword">int</span> m_count=<span class="number">0</span>;   <span class="comment">//最大的因子个数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(N);i++)&#123;</span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> t=N;</span><br><span class="line"><span class="keyword">int</span> j=i;</span><br><span class="line"><span class="keyword">while</span>(t%j==<span class="number">0</span>)&#123;</span><br><span class="line">t=t/j;</span><br><span class="line">j++;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(count&gt;m_count)&#123;</span><br><span class="line">start=i;</span><br><span class="line">m_count=count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m_count)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,m_count);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m_count;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,start+i);</span><br><span class="line"><span class="keyword">if</span>(i!=m_count<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   千万不要忘记素数这种情况，如果输入的值是素数，那么它的因子就是 1 和它本身了，</span></span><br><span class="line"><span class="comment">   但是题目要求1不能打印，所以我们最终只需输出它本身就可以了 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">else</span>&#123;                 </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n%d&quot;</span>,<span class="number">1</span>,N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="5-念数字"><a href="#5-念数字" class="headerlink" title="5. 念数字"></a>5. 念数字</h3><p>输入一个整数，输出每个数字对应的拼音。当整数为负数时，先输出<code>fu</code>字。十个数字对应的拼音如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: ling</span><br><span class="line"><span class="number">1</span>: yi</span><br><span class="line"><span class="number">2</span>: er</span><br><span class="line"><span class="number">3</span>: san</span><br><span class="line"><span class="number">4</span>: si</span><br><span class="line"><span class="number">5</span>: wu</span><br><span class="line"><span class="number">6</span>: liu</span><br><span class="line"><span class="number">7</span>: qi</span><br><span class="line"><span class="number">8</span>: ba</span><br><span class="line"><span class="number">9</span>: jiu</span><br></pre></td></tr></table></figure><p><strong>输入格式：</strong>输入在一行中给出一个整数，如：<code>1234</code>。</p><p><strong>提示：整数包括负数、零和正数。</strong></p><p><strong>输出格式：</strong>在一行中输出这个整数对应的拼音，每个数字的拼音之间用空格分开，行末没有最后的空格。如 <code>yi er san si</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">string</span> b[<span class="number">10</span>]=&#123;<span class="string">&quot;ling&quot;</span>,<span class="string">&quot;yi&quot;</span>,<span class="string">&quot;er&quot;</span>,<span class="string">&quot;san&quot;</span>,<span class="string">&quot;si&quot;</span>,<span class="string">&quot;wu&quot;</span>,<span class="string">&quot;liu&quot;</span>,<span class="string">&quot;qi&quot;</span>,<span class="string">&quot;ba&quot;</span>,<span class="string">&quot;jiu&quot;</span>&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,c);</span><br><span class="line">    <span class="keyword">if</span>(c[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;fu&quot;</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="built_in">strlen</span>(c)<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">              <span class="built_in">cout</span>&lt;&lt;b[c[i]-<span class="string">&#x27;0&#x27;</span>]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;b[c[i]-<span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c[<span class="number">0</span>]!=<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c)<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">              <span class="built_in">cout</span>&lt;&lt;b[c[i]-<span class="string">&#x27;0&#x27;</span>]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;b[c[i]-<span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-N个数求和"><a href="#6-N个数求和" class="headerlink" title="6. N个数求和"></a>6. N个数求和</h3><p>本题的要求很简单，就是求<code>N</code>个数字的和。麻烦的是，这些数字是以有理数<code>分子/分母</code>的形式给出的，你输出的和也必须是有理数的形式。</p><p><strong>输入格式：</strong>输入第一行给出一个正整数<code>N</code>（≤100）。随后一行按格式<code>a1/b1 a2/b2 ...</code>给出<code>N</code>个有理数。题目保证所有分子和分母都在长整型范围内。另外，负数的符号一定出现在分子前面。</p><p><strong>输出格式：</strong>输出上述数字和的最简形式 —— 即将结果写成<code>整数部分 分数部分</code>，其中分数部分写成<code>分子/分母</code>，要求分子小于分母，且它们没有公因子。如果结果的整数部分为0，则只输出分数部分。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b,a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a,b,c = <span class="number">0</span>,d = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">        c = c * b + a * d;</span><br><span class="line">        d *= b;</span><br><span class="line">        <span class="keyword">int</span> g = <span class="built_in">abs</span>(gcd(c,d));</span><br><span class="line">        c /= g;</span><br><span class="line">        d /= g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(c &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        c = -c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(c / d || !c) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c / d);</span><br><span class="line">    <span class="keyword">if</span>(c &gt; d &amp;&amp; c % d) <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(c % d) <span class="built_in">printf</span>(<span class="string">&quot;%d/%d&quot;</span>,c % d,d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-A-B"><a href="#7-A-B" class="headerlink" title="7. A-B"></a>7. A-B</h3><p>本题要求你计算<em>A</em>−<em>B</em>。不过麻烦的是，<em>A</em>和<em>B</em>都是字符串 —— 即从字符串<em>A</em>中把字符串<em>B</em>所包含的字符全删掉，剩下的字符组成的就是字符串<em>A</em>−<em>B</em>。</p><p><strong>输入格式：</strong>输入在2行中先后给出字符串<em>A</em>和<em>B</em>。两字符串的长度都不超过104，并且保证每个字符串都是由可见的ASCII码和空白字符组成，最后以换行符结束。</p><p><strong>输出格式：</strong>在一行中打印出<em>A</em>−<em>B</em>的结果字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">I love GPLT!  It&#39;s a fun game!</span><br><span class="line">aeiou</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">I lv GPLT!  It&#39;s  fn gm!</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="meta"># cin&gt;&gt;  用法1：输入一个数字或字符 用法2：接收一个字符串，遇“空格”、“TAB”、“回车”就结束</span></span><br><span class="line"> <span class="meta"># getline()  用法：接收一个字符串，可以接收空格并输出，需包含“#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;”</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> A,B;</span><br><span class="line">    getline(<span class="built_in">cin</span>,A);  </span><br><span class="line">    getline(<span class="built_in">cin</span>,B);   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.length();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;A.length();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[j]==B[i])</span><br><span class="line">             &#123;</span><br><span class="line">                 A.replace(j,<span class="number">1</span>,<span class="string">&quot;&quot;</span>);  # 字符串替代(开始下标,长度,替换字符)</span><br><span class="line">                 j--;  # 替代之后字符串长度变化</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;A;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-到底有多二"><a href="#8-到底有多二" class="headerlink" title="8. 到底有多二"></a>8. 到底有多二</h3><p>一个整数“<strong>犯二的程度</strong>”定义为该数字中包含2的个数与其位数的比值。如果这个数是负数，则程度增加0.5倍；如果还是个偶数，则再增加1倍。例如数字<code>-13142223336</code>是个11位数，其中有3个2，并且是负数，也是偶数，则它的犯二程度计算为：3/11×1.5×2×100%，约为81.82%。本题就请你计算一个给定整数到底有多二。</p><p><strong>输入格式：</strong>输入第一行给出一个不超过50位的整数<code>N</code>。</p><p><strong>输出格式：</strong>在一行中输出<code>N</code>犯二的程度，保留小数点后两位。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> len=s.length();</span><br><span class="line">    <span class="keyword">int</span> c1=<span class="number">0</span>,c2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;2&#x27;</span>) c1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>) c2=len<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> c2=len;</span><br><span class="line">    <span class="keyword">double</span> ans=(<span class="keyword">double</span>)c1/c2;</span><br><span class="line">    <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>) ans*=<span class="number">1.5</span>;</span><br><span class="line">    <span class="keyword">if</span>((s[len<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>)%<span class="number">2</span>==<span class="number">0</span>) ans*=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f%%&quot;</span>,ans*<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-奇偶分家"><a href="#9-奇偶分家" class="headerlink" title="9. 奇偶分家"></a>9. 奇偶分家</h3><p>给定<code>N</code>个正整数，请统计奇数和偶数各有多少个？</p><p><strong>输入格式：</strong>输入第一行给出一个正整<code>N</code>（≤1000）；第2行给出<code>N</code>个非负整数，以空格分隔。</p><p><strong>输出格式：</strong>在一行中先后输出奇数的个数、偶数的个数。中间以1个空格分隔。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> n,c1=<span class="number">0</span>,c2=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">            c1++;</span><br><span class="line">        <span class="keyword">else</span> c2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;c2&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;c1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-输出GPLT"><a href="#10-输出GPLT" class="headerlink" title="10. 输出GPLT"></a>10. 输出GPLT</h3><p>给定一个长度不超过10000的、仅由英文字母构成的字符串。请将字符重新调整顺序，按<code>GPLTGPLT....</code>这样的顺序输出，并忽略其它字符。当然，四种字符（不区分大小写）的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按<code>GPLT</code>的顺序打印，直到所有字符都被输出。</p><p><strong>输入格式：</strong>输入在一行中给出一个长度不超过10000的、仅由英文字母构成的非空字符串。</p><p><strong>输出格式：</strong>在一行中按题目要求输出排序后的字符串。题目保证输出非空。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> gnum=<span class="number">0</span>,pnum=<span class="number">0</span>,lnum=<span class="number">0</span>,tnum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> l=s.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">if</span>(s[i]==<span class="string">&#x27;G&#x27;</span> || s[i]==<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             gnum++;</span><br><span class="line">         &#125;  </span><br><span class="line">         <span class="keyword">if</span>(s[i]==<span class="string">&#x27;P&#x27;</span> || s[i]==<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             pnum++;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(s[i]==<span class="string">&#x27;L&#x27;</span> || s[i]==<span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">         &#123;    </span><br><span class="line">             lnum++;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(s[i]==<span class="string">&#x27;T&#x27;</span> || s[i]==<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">         &#123;  </span><br><span class="line">             tnum++;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;l;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(gnum&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;G&quot;</span>;</span><br><span class="line">          gnum--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pnum&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;P&quot;</span>;</span><br><span class="line">          pnum--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(lnum&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;L&quot;</span>;</span><br><span class="line">          lnum--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tnum&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;T&quot;</span>;</span><br><span class="line">          tnum--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-查验身份证"><a href="#11-查验身份证" class="headerlink" title="11. 查验身份证"></a>11. 查验身份证</h3><p>一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：</p><p>首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值<code>Z</code>；最后按照以下关系对应<code>Z</code>值与校验码<code>M</code>的值：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Z：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line">M：<span class="number">1</span> <span class="number">0</span> X <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。</p><p><strong>输入格式：</strong>输入第一行给出正整数<em>N</em>（≤100）是输入的身份证号码的个数。随后<em>N</em>行，每行给出1个18位身份证号码。</p><p><strong>输出格式：</strong>按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出<code>All passed</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> a[<span class="number">17</span>]=&#123;<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line"> <span class="keyword">char</span> m[<span class="number">11</span>]=&#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2&#x27;</span>&#125;;</span><br><span class="line"> <span class="keyword">int</span> i,sum=<span class="number">0</span>,z,n,flag=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">char</span> id[<span class="number">18</span>];</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"> &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,id);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">17</span>;j++)</span><br><span class="line">      &#123;</span><br><span class="line">        sum=sum+(id[j]-<span class="string">&#x27;0&#x27;</span>)*a[j];</span><br><span class="line">      &#125;</span><br><span class="line">      z=sum%<span class="number">11</span>;</span><br><span class="line">      <span class="keyword">if</span>(id[<span class="number">17</span>]!=m[z])</span><br><span class="line">      &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,id);</span><br><span class="line">       flag++;</span><br><span class="line">      &#125;</span><br><span class="line">      sum=<span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;All passed&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="12-出租"><a href="#12-出租" class="headerlink" title="12. 出租"></a>12. 出租</h3><p>下面是新浪微博上曾经很火的一张图：</p><p><img src="https://images.ptausercontent.com/187" alt="img" style="zoom: 50%;"></p><p>一时间网上一片求救声，急问这个怎么破。其实这段代码很简单，<code>index</code>数组就是<code>arr</code>数组的下标，<code>index[0]=2</code> 对应 <code>arr[2]=1</code>，<code>index[1]=0</code> 对应 <code>arr[0]=8</code>，<code>index[2]=3</code> 对应 <code>arr[3]=0</code>，以此类推…… 很容易得到电话号码是<code>18013820100</code>。</p><p>本题要求你编写一个程序，为任何一个电话号码生成这段代码 —— 事实上，只要生成最前面两行就可以了，后面内容是不变的。</p><p><strong>输入格式：</strong>输入在一行中给出一个由11位数字组成的手机号码。</p><p><strong>输出格式：</strong>为输入的号码生成代码的前两行，其中<code>arr</code>中的数字必须按递减顺序给出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">char</span> arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;     </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j &lt; n;j++)&#123;  </span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[i])&#123;  </span><br><span class="line">                <span class="keyword">char</span> t = arr[j];  </span><br><span class="line">                arr[j] = arr[i];  </span><br><span class="line">                arr[i] = t;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">11</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">int</span> index[<span class="number">11</span>]=&#123;&#125;,flag=<span class="number">0</span>,k=<span class="number">0</span>,m=<span class="number">0</span>,n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">11</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]==a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[k]=a[i];</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Sort(arr,k+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">11</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]==a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                index[m]=j;</span><br><span class="line">                m++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;int[] arr = new int[]&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;arr[i]-<span class="string">&#x27;0&#x27;</span>&lt;&lt;<span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;arr[k<span class="number">-1</span>]&lt;&lt;<span class="string">&quot;&#125;;&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;int[] index = new int[]&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;index[i]&lt;&lt;<span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;index[m<span class="number">-1</span>]&lt;&lt;<span class="string">&quot;&#125;;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-判断素数"><a href="#13-判断素数" class="headerlink" title="13. 判断素数"></a>13. 判断素数</h3><p>本题的目标很简单，就是判断一个给定的正整数是否素数。</p><p><strong>输入格式：</strong>输入在第一行给出一个正整数<code>N</code>（≤ 10），随后<code>N</code>行，每行给出一个小于231的需要判断的正整数。</p><p><strong>输出格式：</strong>对每个需要判断的正整数，如果它是素数，则在一行中输出<code>Yes</code>，否则输出<code>No</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(n); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n%i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="keyword">for</span> (b = <span class="number">0</span>; b &lt; a; b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line"><span class="keyword">if</span> (prime(c))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-一帮一"><a href="#14-一帮一" class="headerlink" title="14. 一帮一"></a>14. 一帮一</h3><p>“一帮一小组”是中小学中常见的学习组织方式，老师把学习成绩靠前的学生跟学习成绩靠后的学生排在一组。本题请你编写程序帮助老师自动完成这个分配工作，即在得到全班学生的排名后，在当前尚未分组的学生中，将名次最靠前的学生与名次最靠后的<strong>异性</strong>学生分为一组。</p><p><strong>输入格式：</strong>输入第一行给出正偶数<code>N</code>（≤50），即全班学生的人数。此后<code>N</code>行，按照名次从高到低的顺序给出每个学生的性别（0代表女生，1代表男生）和姓名（不超过8个英文字母的非空字符串），其间以1个空格分隔。这里保证本班男女比例是 1:1，并且没有并列名次。</p><p><strong>输出格式：</strong>每行输出一组两个学生的姓名，其间以1个空格分隔。名次高的学生在前，名次低的学生在后。小组的输出顺序按照前面学生的名次从高到低排列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">8</span><br><span class="line">0 Amy</span><br><span class="line">1 Tom</span><br><span class="line">1 Bill</span><br><span class="line">0 Cindy</span><br><span class="line">0 Maya</span><br><span class="line">1 John</span><br><span class="line">1 Jack</span><br><span class="line">0 Linda</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">Amy Jack</span><br><span class="line">Tom Linda</span><br><span class="line">Bill Maya</span><br><span class="line">Cindy John</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> a[n],book[n]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> b[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]!=a[j]&amp;&amp;book[i]==<span class="number">0</span>&amp;&amp;book[j]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;b[i]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b[j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">book[i]=<span class="number">1</span>;</span><br><span class="line">book[j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="15-情人节"><a href="#15-情人节" class="headerlink" title="15. 情人节"></a>15. 情人节</h3><p>以上是朋友圈中一奇葩贴：“2月14情人节了，我决定造福大家。第2个赞和第14个赞的，我介绍你俩认识…………咱三吃饭…你俩请…”。现给出此贴下点赞的朋友名单，请你找出那两位要请客的倒霉蛋。</p><p><strong>输入格式：</strong>输入按照点赞的先后顺序给出不知道多少个点赞的人名，每个人名占一行，为不超过10个英文字母的非空单词，以回车结束。一个英文句点<code>.</code>标志输入的结束，这个符号不算在点赞名单里。</p><p><strong>输出格式：</strong>根据点赞情况在一行中输出结论：若存在第2个人A和第14个人B，则输出“A and B are inviting you to dinner…”；若只有A没有B，则输出“A is the only one for you…”；若连A都没有，则输出“Momo… No one is for you …”。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s,s1,s2;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">while</span>(s!=<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       i++;</span><br><span class="line">       <span class="keyword">if</span>(i==<span class="number">2</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           s1=s;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(i==<span class="number">14</span>)</span><br><span class="line">           s2=s;</span><br><span class="line">       <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;=<span class="number">14</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="string">&quot; and &quot;</span>&lt;&lt;s2&lt;&lt;<span class="string">&quot; are inviting you to dinner...&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i&lt;<span class="number">14</span> &amp;&amp; i&gt;=<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="string">&quot; is the only one for you...&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i&lt;<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Momo... No one is for you ...&quot;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-寻找250"><a href="#16-寻找250" class="headerlink" title="16. 寻找250"></a>16. 寻找250</h3><p>对方不想和你说话，并向你扔了一串数…… 而你必须从这一串数字中找到“250”这个高大上的感人数字。</p><p><strong>输入格式：</strong>输入在一行中给出不知道多少个绝对值不超过1000的整数，其中保证至少存在一个“250”。</p><p><strong>输出格式：</strong>在一行中输出第一次出现的“250”是对方扔过来的第几个数字（计数从1开始）。题目保证输出的数字在整型范围内。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">250</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-稳赢"><a href="#17-稳赢" class="headerlink" title="17. 稳赢"></a>17. 稳赢</h3><p>大家应该都会玩“锤子剪刀布”的游戏：现要求你编写一个稳赢不输的程序，根据对方的出招，给出对应的赢招。但是！为了不让对方输得太惨，你需要每隔<em>K</em>次就让一个平局。</p><p><strong>输入格式：</strong>输入首先在第一行给出正整数<em>K</em>（≤10），即平局间隔的次数。随后每行给出对方的一次出招：<code>ChuiZi</code>代表“锤子”、<code>JianDao</code>代表“剪刀”、<code>Bu</code>代表“布”。<code>End</code>代表输入结束，这一行不要作为出招处理。</p><p><strong>输出格式：</strong>对每一个输入的出招，按要求输出稳赢或平局的招式。每招占一行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k,count=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">while</span>(s!=<span class="string">&quot;End&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(count==k)</span><br><span class="line">        &#123;</span><br><span class="line">            count=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="string">&quot;JianDao&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;ChuiZi&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="string">&quot;ChuiZi&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Bu&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="string">&quot;Bu&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;JianDao&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18-猜数字"><a href="#18-猜数字" class="headerlink" title="18. 猜数字"></a>18. 猜数字</h3><p>一群人坐在一起，每人猜一个 100 以内的数，谁的数字最接近大家平均数的一半就赢。本题就要求你找出其中的赢家。</p><p><strong>输入格式：</strong>输入在第一行给出一个正整数N（≤104）。随后 N 行，每行给出一个玩家的名字（由不超过8个英文字母组成的字符串）和其猜的正整数（≤ 100）。</p><p><strong>输出格式：</strong>在一行中顺序输出：大家平均数的一半（只输出整数部分）、赢家的名字，其间以空格分隔。题目保证赢家是唯一的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,sum=<span class="number">0</span>,avg,min,index,count=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">string</span> s[n];</span><br><span class="line">    <span class="keyword">int</span> a[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s[i]&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum =sum +a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    avg = sum/(<span class="number">2</span>*n);</span><br><span class="line">    min=<span class="built_in">abs</span>(a[<span class="number">0</span>]-avg);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i]-avg)&lt;min)</span><br><span class="line">        &#123;</span><br><span class="line">            min=<span class="built_in">abs</span>(a[i]-avg);</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;avg&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;s[index];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19-6翻了"><a href="#19-6翻了" class="headerlink" title="19. 6翻了"></a>19. 6翻了</h3><p><strong>输入格式：</strong>输入在一行中给出一句话，即一个非空字符串，由不超过 1000 个英文字母、数字和空格组成，以回车结束。</p><p><strong>输出格式：</strong>从左到右扫描输入的句子：如果句子中有超过 3 个连续的 6，则将这串连续的 6 替换成 9；但如果有超过 9 个连续的 6，则将这串连续的 6 替换成 27。其他内容不受影响，原样输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">it is so 666 really 6666 what else can I say 6666666666</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">it is so 666 really 9 what else can I say 27</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> A;</span><br><span class="line">getline(<span class="built_in">cin</span>,A);</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i]==<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;<span class="number">9</span>&amp;&amp;A[i]!=<span class="string">&#x27;6&#x27;</span>&amp;&amp;i&lt;A.length())</span><br><span class="line">&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;27&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(A[i]!=<span class="string">&#x27;6&#x27;</span>&amp;&amp;sum&gt;<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;9&quot;</span>);</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(A[i]!=<span class="string">&#x27;6&#x27;</span>&amp;&amp;sum&lt;=<span class="number">3</span>)&#123;<span class="keyword">while</span>(sum--)<span class="built_in">printf</span>(<span class="string">&quot;6&quot;</span>);&#125;<span class="comment">//‘6’数量不足三个</span></span><br><span class="line"><span class="keyword">if</span>(A[i]!=<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,A[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;<span class="number">9</span>)<span class="built_in">printf</span>(<span class="string">&quot;27&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;<span class="number">3</span>)<span class="built_in">printf</span>(<span class="string">&quot;9&quot;</span>);<span class="comment">//循环输出`9`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20-谁先倒"><a href="#20-谁先倒" class="headerlink" title="20. 谁先倒"></a>20. 谁先倒</h3><p>划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就输了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。</p><p>下面给出甲、乙两人的酒量（最多能喝多少杯不倒）和划拳记录，请你判断两个人谁先倒。</p><p><strong>输入格式：</strong>输入第一行先后给出甲、乙两人的酒量（不超过100的非负整数），以空格分隔。下一行给出一个正整数<code>N</code>（≤100），随后<code>N</code>行，每行给出一轮划拳的记录，格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">甲喊 甲划 乙喊 乙划</span><br></pre></td></tr></table></figure><p>其中<code>喊</code>是喊出的数字，<code>划</code>是划出的数字，均为不超过100的正整数（两只手一起划）。</p><p><strong>输出格式：</strong>在第一行中输出先倒下的那个人：<code>A</code>代表甲，<code>B</code>代表乙。第二行中输出没倒的那个人喝了多少杯。题目保证有一个人倒下。注意程序处理到有人倒下就终止，后面的数据不必处理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,n,counta=<span class="number">0</span>,countb=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> a1[n],a2[n],b1[n],b2[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a1[i]&gt;&gt;a2[i]&gt;&gt;b1[i]&gt;&gt;b2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a2[i]==a1[i]+b1[i] &amp;&amp; b2[i]!=a1[i]+b1[i])</span><br><span class="line">        &#123;</span><br><span class="line">            counta++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b2[i]==a1[i]+b1[i] &amp;&amp; a2[i]!=a1[i]+b1[i])</span><br><span class="line">        &#123;</span><br><span class="line">            countb++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(counta&gt;a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;A&quot;</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;countb;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(countb&gt;b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;B&quot;</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;counta;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="21-正整数A-B"><a href="#21-正整数A-B" class="headerlink" title="21. 正整数A+B"></a>21. 正整数A+B</h3><p>题的目标很简单，就是求两个正整数<code>A</code>和<code>B</code>的和，其中<code>A</code>和<code>B</code>都在区间[1,1000]。稍微有点麻烦的是，输入并不保证是两个正整数。</p><p><strong>输入格式：</strong>输入在一行给出<code>A</code>和<code>B</code>，其间以空格分开。问题是<code>A</code>和<code>B</code>不一定是满足要求的正整数，有时候可能是超出范围的数字、负数、带小数点的实数、甚至是一堆乱码。</p><p>注意：我们把输入中出现的第1个空格认为是<code>A</code>和<code>B</code>的分隔。题目保证至少存在一个空格，并且<code>B</code>不是一个空字符串。</p><p><strong>输出格式：</strong>如果输入的确是两个正整数，则按格式<code>A + B = 和</code>输出。如果某个输入不合要求，则在相应位置输出<code>?</code>，显然此时和也是<code>?</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> S;</span><br><span class="line"><span class="keyword">int</span> flagA = <span class="number">0</span>, flagB = <span class="number">0</span>;</span><br><span class="line">getline(<span class="built_in">cin</span>,S);<span class="comment">//使用getline来接收包括空格在内的字符 </span></span><br><span class="line"><span class="keyword">int</span> sumA = <span class="number">0</span>, sumB = <span class="number">0</span>, Base;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i &lt;S.length(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(S[i]==<span class="string">&#x27; &#x27;</span>)<span class="comment">//碰到第一个空格 </span></span><br><span class="line">&#123;</span><br><span class="line">Base = <span class="number">1</span>;<span class="comment">//初始化 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)<span class="comment">//计算A，注意j的范围从前一个字符到0</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (S[j]&lt;<span class="string">&#x27;0&#x27;</span> || S[j]&gt;<span class="string">&#x27;9&#x27;</span>)<span class="comment">//如果字符不为数字 </span></span><br><span class="line">&#123;</span><br><span class="line">flagA = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//标识，退出 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sumA += Base*(S[j] - <span class="string">&#x27;0&#x27;</span>);<span class="comment">//如果为数字，累加 </span></span><br><span class="line">Base *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)<span class="comment">//如果第一个字符是空格 </span></span><br><span class="line">&#123;</span><br><span class="line">flagA=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//标识，退出 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sumA&gt;<span class="number">1000</span>||sumA==<span class="number">0</span>)<span class="comment">//如果累加和不在0到1000范围内 </span></span><br><span class="line">flagA = <span class="number">1</span>;</span><br><span class="line">Base = <span class="number">1</span>;<span class="comment">//注意重新初始化 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=S.length()<span class="number">-1</span>;j&gt;i;j--)<span class="comment">//计算B，注意j的范围从最后一个字符到i+1 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (S[j]&lt;<span class="string">&#x27;0&#x27;</span> || S[j]&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">flagB = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sumB += Base*(S[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">Base *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sumB&gt;<span class="number">1000</span>||sumB==<span class="number">0</span>)</span><br><span class="line">flagB = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//注意及时跳出大循环 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flagA)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (flagB)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;? + ? = ?&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;? + &quot;</span> &lt;&lt; sumB &lt;&lt; <span class="string">&quot; = ?&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!flagB)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sumA &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; sumB &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; sumA + sumB;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sumA &lt;&lt; <span class="string">&quot; + ? = ?&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-帅到没朋友"><a href="#22-帅到没朋友" class="headerlink" title="22. 帅到没朋友"></a>22. 帅到没朋友</h3><p>当芸芸众生忙着在朋友圈中发照片的时候，总有一些人因为太帅而没有朋友。本题就要求你找出那些帅到没有朋友的人。</p><p><strong>输入格式：</strong>输入第一行给出一个正整数<code>N</code>（≤100），是已知朋友圈的个数；随后<code>N</code>行，每行首先给出一个正整数<code>K</code>（≤1000），为朋友圈中的人数，然后列出一个朋友圈内的所有人——为方便起见，每人对应一个ID号，为5位数字（从00000到99999），ID间以空格分隔；之后给出一个正整数<code>M</code>（≤10000），为待查询的人数；随后一行中列出<code>M</code>个待查询的ID，以空格分隔。</p><p>注意：没有朋友的人可以是根本没安装“朋友圈”，也可以是只有自己一个人在朋友圈的人。虽然有个别自恋狂会自己把自己反复加进朋友圈，但题目保证所有<code>K</code>超过1的朋友圈里都至少有2个不同的人。</p><p><strong>输出格式：</strong>按输入的顺序输出那些帅到没朋友的人。ID间用1个空格分隔，行的首尾不得有多余空格。如果没有人太帅，则输出<code>No one is handsome</code>。</p><p>注意：同一个人可以被查询多次，但只输出一次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">3</span><br><span class="line">3 11111 22222 55555</span><br><span class="line">2 33333 44444</span><br><span class="line">4 55555 66666 99999 77777</span><br><span class="line">8</span><br><span class="line">55555 44444 10000 88888 22222 11111 23333 88888</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">10000 88888 23333</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,a[<span class="number">100001</span>]=&#123;<span class="number">0</span>&#125;,t,b[<span class="number">10001</span>],k=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(;n--;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;m;l++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">if</span>(m!=<span class="number">1</span>)<span class="comment">//防止自恋狂多次加朋友圈 </span></span><br><span class="line">a[t]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(;n--;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">if</span>(a[t]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">b[k++]=t;</span><br><span class="line">a[t]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;k;n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%05d&quot;</span>,b[n]);</span><br><span class="line"><span class="keyword">if</span>(n!=k<span class="number">-1</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!k)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No one is handsome\n&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="23-出生年"><a href="#23-出生年" class="headerlink" title="23. 出生年"></a>23. 出生年</h3><p>以上是新浪微博中一奇葩贴：“我出生于1988年，直到25岁才遇到4个数字都不相同的年份。”也就是说，直到2013年才达到“4个数字都不相同”的要求。本题请你根据要求，自动填充“我出生于<code>y</code>年，直到<code>x</code>岁才遇到<code>n</code>个数字都不相同的年份”这句话。</p><p><strong>输入格式：</strong>输入在一行中给出出生年份<code>y</code>和目标年份中不同数字的个数<code>n</code>，其中<code>y</code>在[1, 3000]之间，<code>n</code>可以是2、或3、或4。注意不足4位的年份要在前面补零，例如公元1年被认为是0001年，有2个不同的数字0和1。</p><p><strong>输出格式：</strong>根据输入，输出<code>x</code>和能达到要求的年份。数字间以1个空格分隔，行首尾不得有多余空格。年份要按4位输出。注意：所谓“<code>n</code>个数字都不相同”是指不同的数字正好是<code>n</code>个。如“2013”被视为满足“4位数字都不同”的条件，但不被视为满足2位或3位数字不同的条件。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> year,n,sum=<span class="number">0</span>,num[<span class="number">4</span>]=&#123;<span class="number">0</span>&#125;,all[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;,first;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;year&gt;&gt;n;</span><br><span class="line">  first=year;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    num[<span class="number">0</span>]=year/<span class="number">1000</span>;</span><br><span class="line">    num[<span class="number">1</span>]=year/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">    num[<span class="number">2</span>]=year/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">    num[<span class="number">3</span>]=year%<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">      all[num[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(all[i]&gt;=<span class="number">1</span>)</span><br><span class="line">        sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum==n)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">      all[i]=<span class="number">0</span>;</span><br><span class="line">    year++;</span><br><span class="line">    sum=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d %04d&quot;</span>,year-first,year);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="24-点赞"><a href="#24-点赞" class="headerlink" title="24. 点赞"></a>24. 点赞</h3><p>微博上有个“点赞”功能，你可以为你喜欢的博文点个赞表示支持。每篇博文都有一些刻画其特性的标签，而你点赞的博文的类型，也间接刻画了你的特性。本题就要求你写个程序，通过统计一个人点赞的纪录，分析这个人的特性。</p><p><strong>输入格式：</strong>输入在第一行给出一个正整数<em>N</em>（≤1000），是该用户点赞的博文数量。随后<em>N</em>行，每行给出一篇被其点赞的博文的特性描述，格式为“<em>K</em> <em>F</em>1⋯<em>F**K</em>”，其中1≤<em>K</em>≤10，<em>F**i</em>（<em>i</em>=1,⋯,<em>K</em>）是特性标签的编号，我们将所有特性标签从1到1000编号。数字间以空格分隔。</p><p><strong>输出格式：</strong>统计所有被点赞的博文中最常出现的那个特性标签，在一行中输出它的编号和出现次数，数字间隔1个空格。如果有并列，则输出编号最大的那个。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,k,lable;</span><br><span class="line"><span class="keyword">int</span> F[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;lable;</span><br><span class="line">F[lable]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> max_lable=<span class="number">0</span>,time=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">1</span>;s&lt;=<span class="number">1000</span>;++s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(F[s]&gt;=time)</span><br><span class="line">&#123;</span><br><span class="line">max_lable=s;</span><br><span class="line">time=F[s];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;max_lable&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;time&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="25-矩阵A乘以B"><a href="#25-矩阵A乘以B" class="headerlink" title="25. 矩阵A乘以B"></a>25. 矩阵A乘以B</h3><p>给定两个矩阵<em>A</em>和<em>B</em>，要求你计算它们的乘积矩阵<em>A**B</em>。需要注意的是，只有规模匹配的矩阵才可以相乘。即若<em>A</em>有<em>R**a</em>行、<em>C**a</em>列，<em>B</em>有<em>R**b</em>行、<em>C**b</em>列，则只有<em>C**a</em>与<em>R**b</em>相等时，两个矩阵才能相乘。</p><p><strong>输入格式：</strong>输入先后给出两个矩阵<em>A</em>和<em>B</em>。对于每个矩阵，首先在一行中给出其行数<em>R</em>和列数<em>C</em>，随后<em>R</em>行，每行给出<em>C</em>个整数，以1个空格分隔，且行首尾没有多余的空格。输入保证两个矩阵的<em>R</em>和<em>C</em>都是正数，并且所有整数的绝对值不超过100。</p><p><strong>输出格式：</strong>若输入的两个矩阵的规模是匹配的，则按照输入的格式输出乘积矩阵<em>A**B</em>，否则输出<code>Error: Ca != Rb</code>，其中<code>Ca</code>是<em>A</em>的列数，<code>Rb</code>是<em>B</em>的行数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ra,ca,rb,cb;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ra&gt;&gt;ca;</span><br><span class="line">    <span class="keyword">int</span> a[ra][ca];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ra;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ca;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d &quot;</span>,&amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;rb&gt;&gt;cb;</span><br><span class="line">    <span class="keyword">int</span> b[rb][cb];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rb;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cb;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d &quot;</span>,&amp;b[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ca!=rb)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: %d != %d&quot;</span>,ca,rb);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ca==rb)</span><br><span class="line">    &#123;</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;ra&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;cb&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ra;i++)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cb;j++)</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">                  <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;ca;k++)</span><br><span class="line">                  &#123;</span><br><span class="line">                      sum=sum+a[i][k]*b[k][j];</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">if</span>(j==cb<span class="number">-1</span>)</span><br><span class="line">                      <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                  <span class="keyword">else</span> <span class="keyword">if</span>(j!=cb<span class="number">-1</span>)</span><br><span class="line">                      <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="26-Left-pad"><a href="#26-Left-pad" class="headerlink" title="26. Left-pad"></a>26. Left-pad</h3><p>根据新浪微博上的消息，有一位开发者不满NPM（Node Package Manager）的做法，收回了自己的开源代码，其中包括一个叫left-pad的模块，就是这个模块把javascript里面的React/Babel干瘫痪了。这是个什么样的模块？就是在字符串前填充一些东西到一定的长度。例如用<code>*</code>去填充字符串<code>GPLT</code>，使之长度为10，调用left-pad的结果就应该是<code>******GPLT</code>。Node社区曾经对left-pad紧急发布了一个替代，被严重吐槽。下面就请你来实现一下这个模块。</p><p><strong>输入格式：</strong>输入在第一行给出一个正整数<code>N</code>（≤104）和一个字符，分别是填充结果字符串的长度和用于填充的字符，中间以1个空格分开。第二行给出原始的非空字符串，以回车结束。</p><p><strong>输出格式：</strong>在一行中输出结果字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入样例1：</span><br><span class="line">15 _</span><br><span class="line">I love GPLT</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出样例<span class="number">1</span>：</span><br><span class="line">____I love GPLT</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入样例<span class="number">2</span>：</span><br><span class="line"><span class="number">4</span> *</span><br><span class="line"><span class="keyword">this</span> <span class="keyword">is</span> a sample <span class="keyword">for</span> cut</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出样例<span class="number">2</span>：</span><br><span class="line">cut</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a;</span><br><span class="line">getchar();</span><br><span class="line">getline(<span class="built_in">cin</span>, s);</span><br><span class="line"><span class="keyword">if</span> (n &gt;= s.length())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - s.length(); i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - n; i &lt; s.length(); i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="27-古风排版"><a href="#27-古风排版" class="headerlink" title="27. 古风排版"></a>27. 古风排版</h3><p>中国的古人写文字，是从右向左竖向排版的。本题就请你编写程序，把一段文字按古风排版。</p><p><strong>输入格式：</strong>输入在第一行给出一个正整数<em>N</em>（&lt;100），是每一列的字符数。第二行给出一个长度不超过1000的非空字符串，以回车结束。</p><p><strong>输出格式：</strong>按古风格式排版给定的字符串，每列<em>N</em>个字符（除了最后一列可能不足<em>N</em>个）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">4</span><br><span class="line">This is a test case</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">asa T</span><br><span class="line">st ih</span><br><span class="line">e tsi</span><br><span class="line"> ce s</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rows = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; rows;</span><br><span class="line">    <span class="built_in">cin</span>.getline(s, <span class="number">1020</span>);</span><br><span class="line">    <span class="built_in">cin</span>.getline(s, <span class="number">1020</span>);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">int</span> cols = len / rows;</span><br><span class="line">    <span class="keyword">if</span>(len % rows != <span class="number">0</span>)&#123;</span><br><span class="line">        cols++;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((cols - j - <span class="number">1</span>) * rows + i &gt; (len - <span class="number">1</span>))&#123;</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">putchar</span>(s[(cols - j - <span class="number">1</span>) * rows + i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="28-阅览室"><a href="#28-阅览室" class="headerlink" title="28. 阅览室"></a>28. 阅览室</h3><p>天梯图书阅览室请你编写一个简单的图书借阅统计程序。当读者借书时，管理员输入书号并按下<code>S</code>键，程序开始计时；当读者还书时，管理员输入书号并按下<code>E</code>键，程序结束计时。书号为不超过1000的正整数。当管理员将0作为书号输入时，表示一天工作结束，你的程序应输出当天的读者借书次数和平均阅读时间。</p><p>注意：由于线路偶尔会有故障，可能出现不完整的纪录，即只有<code>S</code>没有<code>E</code>，或者只有<code>E</code>没有<code>S</code>的纪录，系统应能自动忽略这种无效纪录。另外，题目保证书号是书的唯一标识，同一本书在任何时间区间内只可能被一位读者借阅。</p><p><strong>输入格式：</strong>输入在第一行给出一个正整数<em>N</em>（≤10），随后给出<em>N</em>天的纪录。每天的纪录由若干次借阅操作组成，每次操作占一行，格式为：</p><p><code>书号</code>（[1, 1000]内的整数） <code>键值</code>（<code>S</code>或<code>E</code>） <code>发生时间</code>（<code>hh:mm</code>，其中<code>hh</code>是[0,23]内的整数，<code>mm</code>是[0, 59]内整数）</p><p>每一天的纪录保证按时间递增的顺序给出。</p><p><strong>输出格式：</strong>对每天的纪录，在一行中输出当天的读者借书次数和平均阅读时间（以分钟为单位的精确到个位的整数时间）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">3</span><br><span class="line">1 S 08:10</span><br><span class="line">2 S 08:35</span><br><span class="line">1 E 10:00</span><br><span class="line">2 E 13:16</span><br><span class="line">0 S 17:00</span><br><span class="line">0 S 17:00</span><br><span class="line">3 E 08:10</span><br><span class="line">1 S 08:20</span><br><span class="line">2 S 09:00</span><br><span class="line">1 E 09:20</span><br><span class="line">0 E 17:00</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">2 196</span><br><span class="line">0 0</span><br><span class="line">1 60</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//本题还要计算天数，一天工作结束，你的程序应输出当天的读者借书次数和平均阅读时间。 </span></span><br><span class="line"><span class="keyword">int</span> n,count = <span class="number">0</span>,num;<span class="comment">//n为天数，count 为一天中借书次数，num为书名号 </span></span><br><span class="line"><span class="keyword">char</span> a;<span class="comment">//按键S ,E</span></span><br><span class="line"><span class="keyword">int</span> h,m;<span class="comment">//小时分钟 </span></span><br><span class="line"><span class="keyword">int</span> sumtime = <span class="number">0</span>;<span class="comment">//一天所有书籍总阅读时长 </span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> time[<span class="number">1001</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//每本书的借书时长 </span></span><br><span class="line"><span class="keyword">int</span> book[<span class="number">1001</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//每本书的借书次数 </span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d %c %d:%d&quot;</span>,&amp;num,&amp;a,&amp;h,&amp;m))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">book[num]++;<span class="comment">//计数，用来标记S,E是不是成双成对的出现的</span></span><br><span class="line"><span class="keyword">if</span> (a == <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">&#123; </span><br><span class="line">time[num] = h*<span class="number">60</span>+m;<span class="comment">//cout&lt;&lt;time[num]&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (book[num]%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; a == <span class="string">&#x27;E&#x27;</span>)<span class="comment">//S,E成对的出现才进行借书时长的计算 </span></span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">time[num] = h*<span class="number">60</span> + m - time[num];</span><br><span class="line">sumtime +=time[num]; </span><br><span class="line">time[num] = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0 0&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;count&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;(<span class="keyword">int</span>)(<span class="number">1.0</span>*sumtime/count + <span class="number">0.5</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//四舍五入 </span></span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">sumtime = <span class="number">0</span>;<span class="comment">//一天结束后全清零</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="29-整除光棍"><a href="#29-整除光棍" class="headerlink" title="29. 整除光棍"></a>29. 整除光棍</h3><p>这里所谓的“光棍”，并不是指单身汪啦~ 说的是全部由1组成的数字，比如1、11、111、1111等。传说任何一个光棍都能被一个不以5结尾的奇数整除。比如，111111就可以被13整除。 现在，你的程序要读入一个整数<code>x</code>，这个整数一定是奇数并且不以5结尾。然后，经过计算，输出两个数字：第一个数字<code>s</code>，表示<code>x</code>乘以<code>s</code>是一个光棍，第二个数字<code>n</code>是这个光棍的位数。这样的解当然不是唯一的,题目要求你输出最小的解。</p><p>提示：一个显然的办法是逐渐增加光棍的位数，直到可以整除<code>x</code>为止。但难点在于，<code>s</code>可能是个非常大的数 —— 比如，程序输入31，那么就输出3584229390681和15，因为31乘以3584229390681的结果是111111111111111，一共15个1。</p><p><strong>输入格式：</strong>输入在一行中给出一个不以5结尾的正奇数<code>x</code>（&lt;1000）。</p><p><strong>输出格式：</strong>在一行中输出相应的最小的<code>s</code>和<code>n</code>，其间以1个空格分隔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">31</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">3584229390681 15</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">a[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> fz[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> d=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">d=d*<span class="number">10</span>+a[j];</span><br><span class="line">fz[j]=d/n;</span><br><span class="line">d=d%n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d!=<span class="number">0</span>)  <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(fz[j]==<span class="number">0</span>&amp;&amp;j&lt;=i) j++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;=i;k++)  &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fz[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="30-倒数第N个字符串"><a href="#30-倒数第N个字符串" class="headerlink" title="30. 倒数第N个字符串"></a>30. 倒数第N个字符串</h3><p>给定一个完全由小写英文字母组成的字符串等差递增序列，该序列中的每个字符串的长度固定为 L，从 L 个 a 开始，以 1 为步长递增。例如当 L 为 3 时，序列为 { aaa, aab, aac, …, aaz, aba, abb, …, abz, …, zzz }。这个序列的倒数第27个字符串就是 zyz。对于任意给定的 L，本题要求你给出对应序列倒数第 N 个字符串。</p><p><strong>输入格式：</strong>输入在一行中给出两个正整数 L（2 ≤ L ≤ 6）和 N（≤105）。</p><p><strong>输出格式：</strong>在一行中输出对应序列倒数第 N 个字符串。题目保证这个字符串是存在的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">3 7417</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">pat</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;i++)&#123;</span><br><span class="line">        sum=sum*<span class="number">26</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,n;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;l,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> ll=f(l);</span><br><span class="line">    <span class="keyword">int</span> x=ll-n,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        a[j]=x/f(i)+<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        x=x%f(i);</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="31-福到了"><a href="#31-福到了" class="headerlink" title="31. 福到了"></a>31. 福到了</h3><p>“福”字倒着贴，寓意“福到”。不论到底算不算民俗，本题且请你编写程序，把各种汉字倒过来输出。这里要处理的每个汉字是由一个 N × N 的网格组成的，网格中的元素或者为字符 <code>@</code> 或者为空格。而倒过来的汉字所用的字符由裁判指定。</p><p><strong>输入格式：</strong>输入在第一行中给出倒过来的汉字所用的字符、以及网格的规模 N （不超过100的正整数），其间以 1 个空格分隔；随后 N 行，每行给出 N 个字符，或者为 <code>@</code> 或者为空格。</p><p><strong>输出格式：</strong>输出倒置的网格，如样例所示。但是，如果这个字正过来倒过去是一样的，就先输出<code>bu yong dao le</code>，然后再用输入指定的字符将其输出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n,i,j,count=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">char</span> ch,a[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;ch&gt;&gt;n;</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">  &#123;</span><br><span class="line">    a[i][j]=getchar();</span><br><span class="line">    <span class="keyword">if</span>(a[i][j]!=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">      a[i][j]=ch;</span><br><span class="line">  &#125;</span><br><span class="line">  getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">if</span>(a[i][j]==a[n-i<span class="number">-1</span>][n-j<span class="number">-1</span>])</span><br><span class="line">      count++;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">if</span>(count==n*n)</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;bu yong dao le\n&quot;</span>);</span><br><span class="line"> <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=n<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;a[i][j];</span><br><span class="line"><span class="keyword">if</span>(i)</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-打印沙漏&quot;&gt;&lt;a href=&quot;#1-打印沙漏&quot; class=&quot;headerlink&quot; title=&quot;1. 打印沙漏&quot;&gt;&lt;/a&gt;1. 打印沙漏&lt;/h3&gt;&lt;p&gt;本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印&lt;/p&gt;
&lt;fi</summary>
      
    
    
    
    
    <category term="C++" scheme="https://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>PTA-python习题精选(2)</title>
    <link href="https://example.com/2020/10/18/4/"/>
    <id>https://example.com/2020/10/18/4/</id>
    <published>2020-10-17T16:00:00.000Z</published>
    <updated>2020-11-07T12:12:11.939Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-四则运算（用字典实现）"><a href="#1-四则运算（用字典实现）" class="headerlink" title="1. 四则运算（用字典实现）"></a>1. 四则运算（用字典实现）</h3><p>四则运算（用字典实现），比较c语言的switch语句。</p><p><strong>输入格式：</strong>在一行中输入一个数字 在一行中输入一个四帜运算符(+,-,*,/) 在一行中输入一个数字</p><p><strong>输出格式：</strong>在一行中输出运算结果（小数保留2位）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = float(input())</span><br><span class="line">op = input()</span><br><span class="line">b = float(input())</span><br><span class="line">dict = &#123;<span class="string">&#x27;+&#x27;</span>: <span class="string">&quot;a+b&quot;</span>, <span class="string">&#x27;-&#x27;</span>: <span class="string">&quot;a-b&quot;</span>, <span class="string">&#x27;*&#x27;</span>: <span class="string">&quot;a*b&quot;</span>, <span class="string">&#x27;/&#x27;</span>: <span class="string">&quot;a/b&quot;</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.format(eval(dict[op])))   <span class="comment"># eval()函数用来执行一个字符串表达式，并返回表达式的值</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">&quot;divided by zero&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-分析活动投票情况"><a href="#2-分析活动投票情况" class="headerlink" title="2. 分析活动投票情况"></a>2. 分析活动投票情况</h3><p>利用集合分析活动投票情况。第一小队有五名队员，序号是1,2,3,4,5;第二小队也有五名队员，序号6,7,8,9,10。输入一个得票字符串，求第二小队没有得票的队员</p><p><strong>输入格式：</strong>在一行中输入得票的队员的序列号，用逗号隔开。</p><p><strong>输出格式：</strong>一行中输出第二小队没有得票的队员序号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">l = list(map(int, input().split(<span class="string">&#x27;,&#x27;</span>)))</span><br><span class="line">s = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>, <span class="number">11</span>) <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> l]</span><br><span class="line">print(*s, sep=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">end：可以设置print打印结束时最后跟的字符形式。</span></span><br><span class="line"><span class="string">sep：可以设置print中分隔不同值的形式</span></span><br><span class="line"><span class="string">本题中两者的区别是最后一个输出后，后面是否有空格</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">s1 = &#x27;hello&#x27;</span></span><br><span class="line"><span class="string">s2 = &#x27;world&#x27;</span></span><br><span class="line"><span class="string">print(s1, end=&#x27;,&#x27;)</span></span><br><span class="line"><span class="string">print(s2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># (    print(s1, s2, sep=&#x27;, &#x27;)   )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出：hello, world</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-统计工龄"><a href="#3-统计工龄" class="headerlink" title="3. 统计工龄"></a>3. 统计工龄</h3><p>给定公司<em>N</em>名员工的工龄，要求按工龄增序输出每个工龄段有多少员工。</p><p><strong>输入格式：</strong>输入首先给出正整数<em>N</em>（≤105），即员工总人数；随后给出<em>N</em>个整数，即每个员工的工龄，范围在[0, 50]。</p><p><strong>输出格式：</strong>按工龄的递增顺序输出每个工龄的员工个数，格式为：“工龄:人数”。每项占一行。如果人数为0则不输出该项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">N = int(input())</span><br><span class="line">age = list(map(int, input().split()))</span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> age:</span><br><span class="line">    dic[i] = dic.get(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="comment"># dic.get(key, &#x27;fault&#x27;) ,当key不存在不会抛出异常，会显示fault里的信息</span></span><br><span class="line">    <span class="comment"># dic[key], 当key不存在会抛出 KeyError 错误</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> sorted(dic):   <span class="comment"># 排序</span></span><br><span class="line">    print(<span class="string">&quot;&#123;:d&#125;:&#123;:d&#125;&quot;</span>.format(j, dic[j]))</span><br></pre></td></tr></table></figure><h3 id="4-列表去重"><a href="#4-列表去重" class="headerlink" title="4. 列表去重"></a>4. 列表去重</h3><p>输入一个列表，去掉列表中重复的数字，按原来次序输出！</p><p><strong>输入格式：</strong>在一行中输入列表</p><p><strong>输出格式：</strong>在一行中输出不重复列表元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">li = eval(input())  <span class="comment"># 输入默认为字符串，可通过eval函数将输入的列表字符串转换为列表</span></span><br><span class="line">li2 = list(set(li))</span><br><span class="line">li2.sort(key=li.index) </span><br><span class="line">print(<span class="string">&quot; &quot;</span>.join(map(str, li2)))  <span class="comment"># join()方法不能处理数字型数据，先将列表中每一个元素转换为字符型</span></span><br><span class="line"><span class="comment"># (  print(*s, seq=&#x27; &#x27;)  )</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string">sort() 函数用于对原列表进行排序</span></span><br><span class="line"><span class="string">list.sort( key=None, reverse=False)</span></span><br><span class="line"><span class="string">key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</span></span><br><span class="line"><span class="string">reverse -- 排序规则，reverse = True 降序， reverse = False 升序（默认）。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">eval()函数常见作用有：</span><br><span class="line"></span><br><span class="line">1、计算字符串中有效的表达式，并返回结果</span><br><span class="line">&gt;&gt;&gt; eval(&#39;pow(2,2)&#39;)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; eval(&#39;2 + 2&#39;)</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">2、将字符串转成相应的对象（如list、tuple、dict和string之间的转换）</span><br><span class="line">&gt;&gt;&gt; a &#x3D; &quot;[[1,2], [3,4], [5,6], [7,8], [9,0]]&quot;</span><br><span class="line">&gt;&gt;&gt; b &#x3D; eval(a)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[[1, 2], [3, 4], [5, 6], [7, 8], [9, 0]]</span><br><span class="line">&gt;&gt;&gt; a &#x3D; &quot;&#123;1:&#39;xx&#39;,2:&#39;yy&#39;&#125;&quot;  </span><br><span class="line">&gt;&gt;&gt; c &#x3D; eval(a)</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">&#123;1: &#39;xx&#39;, 2: &#39;yy&#39;&#125;</span><br><span class="line"># 比如输入字典input():&#123;1:&#39;xx&#39;,2:&#39;yy&#39;&#125;,默认为字符型：&quot;&#123;1:&#39;xx&#39;,2:&#39;yy&#39;&#125;&quot;,可利用这种方法转化为字典</span><br><span class="line">&gt;&gt;&gt; a &#x3D; &quot;(1,2,3,4)&quot;  </span><br><span class="line">&gt;&gt;&gt; d &#x3D; eval(a)</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">(1, 2, 3, 4)</span><br></pre></td></tr></table></figure><h3 id="5-两数之和"><a href="#5-两数之和" class="headerlink" title="5. 两数之和"></a>5. 两数之和</h3><p>给定一组整数，还有一个目标数，在给定这组整数中找到两个数字，使其和为目标数，如找到，解是唯一的。找不到则显示 “no answer”。输出的下标按从小到大排序。用一重循环加字典实现。</p><p><strong>输入格式：</strong>在一行中给出这组数。 在下一行输入目标数</p><p><strong>输出格式：</strong>在一行中输出这两个数的下标，用一个空格分开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">li = list(map(int, input().split(<span class="string">&#x27;,&#x27;</span>)))</span><br><span class="line">num = int(input())</span><br><span class="line">dic = &#123;&#125;</span><br><span class="line">cut = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    dic[i] = num - i</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dic.items():</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> li <span class="keyword">and</span> value <span class="keyword">in</span> li:</span><br><span class="line">        print(<span class="string">&quot;&#123;:d&#125; &#123;:d&#125;&quot;</span>.format(li.index(key), li.index(value)))</span><br><span class="line">        cut = <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> cut == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&quot;no answer&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="6-字典合并"><a href="#6-字典合并" class="headerlink" title="6. 字典合并"></a>6. 字典合并</h3><p>字典合并。输入用字符串表示两个字典，输出合并后的字典,字典的键用一个字母或数字表示。注意：1和‘1’是不同的关键字！</p><p><strong>输入格式：</strong>在第一行中输入第一个字典字符串 在第二行中输入第二个字典字符串</p><p><strong>输出格式：</strong>在一行中输出合并的字典，输出按字典序。”1”的ASCII吗为49,大于1，排序时1在前，”1”在后，其它的也一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">a = eval(input())</span><br><span class="line">b = eval(input())</span><br><span class="line"><span class="comment"># 字典合并</span></span><br><span class="line">c = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a: </span><br><span class="line">    c[i] = b.get(i, <span class="number">0</span>) + a[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> c.keys():</span><br><span class="line">        c[i] = b[i]</span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">d = dict(sorted(c.items(), key=<span class="keyword">lambda</span> c: c[<span class="number">0</span>] <span class="keyword">if</span> type(c[<span class="number">0</span>]) == int <span class="keyword">else</span> ord(c[<span class="number">0</span>])))</span><br><span class="line">d = str(d)</span><br><span class="line">d = d.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">d = d.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">sorted(dict.items(), key=lambda e:e[0], reverse=True)</span></span><br><span class="line"><span class="string">里面三个参数</span></span><br><span class="line"><span class="string">dict.items()  # 可迭代元素。</span></span><br><span class="line"><span class="string">key= lambda d:d[0]  # d[0]表示按键，d[1]表示按值。</span></span><br><span class="line"><span class="string">reverse  # 默认是False，升序排列。当值为True时是降序排列。</span></span><br><span class="line"><span class="string">返回的是一个列表，列表中是排列后的元组。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ord()函数以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="7-能被3-5和7整除的数的个数（用集合实现）"><a href="#7-能被3-5和7整除的数的个数（用集合实现）" class="headerlink" title="7. 能被3,5和7整除的数的个数（用集合实现）"></a>7. 能被3,5和7整除的数的个数（用集合实现）</h3><p>求指定区间内能被3,5和7整除的数的个数</p><p><strong>输入格式：</strong>在一行中从键盘输入2个正整数a,b（1&lt;=a&lt;b&lt;=10000000），用空格隔开。</p><p><strong>输出格式：</strong>在一行输出大于等于a且小于等于b的能被3,5和7整除的数的个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">s = set() <span class="comment">#定义一个空集合 </span></span><br><span class="line">a,b=map(int,input().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(a,b+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span> <span class="keyword">and</span> i%<span class="number">5</span>==<span class="number">0</span> <span class="keyword">and</span> i%<span class="number">7</span>==<span class="number">0</span>):</span><br><span class="line">        s.add(i)</span><br><span class="line">print(len(s))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s = set() #定义一个空集合 </span></span><br><span class="line"><span class="string">d = &#123;&#125;  # 定义一个空字典</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">集合的添加有两种常用方法，分别是add和update。</span></span><br><span class="line"><span class="string">集合add方法：是把要传入的元素做为一个整个添加到集合中，例如：</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a = set(&#x27;boy&#x27;)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a.add(&#x27;python&#x27;)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a</span></span><br><span class="line"><span class="string">set([&#x27;y&#x27;, &#x27;python&#x27;, &#x27;b&#x27;, &#x27;o&#x27;])</span></span><br><span class="line"><span class="string">集合update方法：是把要传入的元素拆分，做为个体传入到集合中，例如：</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a = set(&#x27;boy&#x27;)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a.update(&#x27;python&#x27;)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a</span></span><br><span class="line"><span class="string">set([&#x27;b&#x27;, &#x27;h&#x27;, &#x27;o&#x27;, &#x27;n&#x27;, &#x27;p&#x27;, &#x27;t&#x27;, &#x27;y&#x27;])</span></span><br><span class="line"><span class="string">集合删除操作方法：remove</span></span><br><span class="line"><span class="string">set([&#x27;y&#x27;, &#x27;python&#x27;, &#x27;b&#x27;, &#x27;o&#x27;])</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a.remove(&#x27;python&#x27;)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a</span></span><br><span class="line"><span class="string">set([&#x27;y&#x27;, &#x27;b&#x27;, &#x27;o&#x27;])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="8-一帮一"><a href="#8-一帮一" class="headerlink" title="8. 一帮一"></a>8. 一帮一</h3><p>“一帮一小组”是中小学中常见的学习组织方式，老师把学习成绩靠前的学生跟学习成绩靠后的学生排在一组。本题请你编写程序帮助老师自动完成这个分配工作，即在得到全班学生的排名后，在当前尚未分组的学生中，将名次最靠前的学生与名次最靠后的<strong>异性</strong>学生分为一组。</p><p><strong>输入格式：</strong>输入第一行给出正偶数<code>N</code>（≤50），即全班学生的人数。此后<code>N</code>行，按照名次从高到低的顺序给出每个学生的性别（0代表女生，1代表男生）和姓名（不超过8个英文字母的非空字符串），其间以1个空格分隔。这里保证本班男女比例是1:1，并且没有并列名次。</p><p><strong>输出格式：</strong>每行输出一组两个学生的姓名，其间以1个空格分隔。名次高的学生在前，名次低的学生在后。小组的输出顺序按照前面学生的名次从高到低排列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">8</span><br><span class="line">0 Amy</span><br><span class="line">1 Tom</span><br><span class="line">1 Bill</span><br><span class="line">0 Cindy</span><br><span class="line">0 Maya</span><br><span class="line">1 John</span><br><span class="line">1 Jack</span><br><span class="line">0 Linda</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">Amy Jack</span><br><span class="line">Tom Linda</span><br><span class="line">Bill Maya</span><br><span class="line">Cindy John</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 男女分开压入队列，从总队列输出，输出男则pop女队尾，输出女则pop男队尾</span></span><br><span class="line">n = int(input())</span><br><span class="line">stu = []</span><br><span class="line">woman = []</span><br><span class="line">man = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    t = list(input().split())</span><br><span class="line">    stu.append(t)</span><br><span class="line">    <span class="keyword">if</span> t[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        woman.append(t[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        man.append(t[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n//<span class="number">2</span>):  <span class="comment"># Python 3以后,&quot; / &quot;就表示 浮点数除法，返回浮点结果; &quot; // &quot;表示整数除法</span></span><br><span class="line">    <span class="keyword">if</span> stu[i][<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        print(woman.pop(<span class="number">0</span>),man.pop())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(man.pop(<span class="number">0</span>),woman.pop())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-列表或元组的数字元素求和"><a href="#9-列表或元组的数字元素求和" class="headerlink" title="9. 列表或元组的数字元素求和"></a>9. 列表或元组的数字元素求和</h3><p>求列表中数字和,列表中嵌套层次不限2层</p><p><strong>输入格式：</strong>在一行中输入列表或元组</p><p><strong>输出格式：</strong>在一行中输出数字的和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">[11,2,[3,7],(68,-1),&quot;123&quot;,9]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">99</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isnum</span>(<span class="params">s</span>):</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> isinstance(i,(int,float)):</span><br><span class="line">            sum += i</span><br><span class="line">        <span class="keyword">if</span> isinstance(i,(list,tuple)):</span><br><span class="line">            sum += isnum(i)  <span class="comment"># 递归实现</span></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"> </span><br><span class="line">print(isnum(eval(input())))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">isinstance() 与 type() 区别：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">type() 不会认为子类是一种父类类型，不考虑继承关系。</span></span><br><span class="line"><span class="string">isinstance() 会认为子类是一种父类类型，考虑继承关系。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果要判断两个类型是否相同推荐使用 isinstance()。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">语法</span></span><br><span class="line"><span class="string">以下是 isinstance() 方法的语法:</span></span><br><span class="line"><span class="string">isinstance(object, classinfo)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对于基本类型来说 classinfo 可以是：</span></span><br><span class="line"><span class="string">int，float，bool，complex，str(字符串)，list，dict(字典)，set，tuple</span></span><br><span class="line"><span class="string">要注意的是，classinfo 的字符串是 str 而不是 string，字典也是简写 dict。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="10-列表数字元素加权和-1"><a href="#10-列表数字元素加权和-1" class="headerlink" title="10.列表数字元素加权和(1)"></a>10.列表数字元素加权和(1)</h3><p>输入一个嵌套列表，嵌套层次不限，根据层次，求列表元素的加权和。第一层每个元素 的值为：元素值 <em> </em>1<em>，第二层每个元素的值为：元素值 </em> <em>2</em>，第三层每个元素的值为：元素值 <em> </em>3*， …,以此类推！</p><p><strong>输入格式：</strong>在一行中输入列表</p><p><strong>输出格式：</strong>在一行中输出加权和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">[1,2,[3,4,[5,6],7],8]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">72</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jiaquan</span>(<span class="params">li,mul</span>):</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">        <span class="keyword">if</span> isinstance(i, (int,float)):</span><br><span class="line">            sum = sum + i * mul</span><br><span class="line">        <span class="keyword">if</span> isinstance(i, list):</span><br><span class="line">            sum = sum + jiaquan(i,mul+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">print(jiaquan(eval(input()),<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="11-求指定层的元素个数"><a href="#11-求指定层的元素个数" class="headerlink" title="11. 求指定层的元素个数"></a>11. 求指定层的元素个数</h3><p>输入一个嵌套列表，再输入层数，求该层的数字元素个数。</p><p><strong>输入格式：</strong>第一行输入列表 第二行输入层数</p><p><strong>输出格式：</strong>在一行中输出元素个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">[1,2,[3,4,[5,6],7],8]</span><br><span class="line">3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ceng</span>(<span class="params">li, floor, num</span>):</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">        <span class="keyword">if</span> isinstance(i, int) <span class="keyword">and</span> floor == num:</span><br><span class="line">            count = count + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(i, list):</span><br><span class="line">            count = count + ceng(i, floor+<span class="number">1</span>, num)</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">li= eval(input())</span><br><span class="line">n = int(input())</span><br><span class="line">print(ceng(li, <span class="number">1</span>, n))</span><br></pre></td></tr></table></figure><h3 id="12-输出全排列"><a href="#12-输出全排列" class="headerlink" title="12. 输出全排列"></a>12. 输出全排列</h3><p>输入整数n（3&lt;=n&lt;=7）,编写程序输出<code>1,2,...,n</code>整数的全排列，按字典序输出。</p><p><strong>输入格式：</strong>一行输入正整数n。</p><p><strong>输出格式：</strong>按字典序输出1到n的全排列。每种排列占一行，数字间无空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">123</span><br><span class="line">132</span><br><span class="line">213</span><br><span class="line">231</span><br><span class="line">312</span><br><span class="line">321</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">start = <span class="number">10</span>**(n<span class="number">-1</span>)</span><br><span class="line">end = (n+<span class="number">1</span>)*<span class="number">10</span>**(n<span class="number">-1</span>)</span><br><span class="line">s = set(str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(start, end):</span><br><span class="line">    i = str(i)</span><br><span class="line">    s1 = set()</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        s1.add(j)</span><br><span class="line">    <span class="keyword">if</span> s1 == s:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><h3 id="13-词频统计"><a href="#13-词频统计" class="headerlink" title="13. 词频统计"></a>13. 词频统计</h3><p>请编写程序，对一段英文文本，统计其中所有不同单词的个数，以及词频最大的前10%的单词。</p><p>所谓“单词”，是指由不超过80个单词字符组成的连续字符串，但长度超过15的单词将只截取保留前15个单词字符。而合法的“单词字符”为大小写字母、数字和下划线，其它字符均认为是单词分隔符。</p><p><strong>输入格式：</strong>输入给出一段非空文本，最后以符号<code>#</code>结尾。输入保证存在至少10个不同的单词。</p><p><strong>输出格式：</strong>在第一行中输出文本中所有不同单词的个数。注意“单词”不区分英文大小写，例如“PAT”和“pat”被认为是同一个单词。</p><p>随后按照词频递减的顺序，按照<code>词频:单词</code>的格式输出词频最大的前10%的单词。若有并列，则按递增字典序输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">This is a test.</span><br><span class="line"></span><br><span class="line">The word &quot;this&quot; is the word with the highest frequency.</span><br><span class="line"></span><br><span class="line">Longlonglonglongword should be cut off, so is considered as the same as longlonglonglonee.  But this_8 is different than this, and this, and this...#</span><br><span class="line">this line should be ignored.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输出样例：(注意：虽然单词&quot;the&quot;也出现了4次,但因为我们只要输出前10%（即23个单词中的前2个）单词,而按照字母序,&quot;the&quot;排第3位,所以不输出)</span><br><span class="line">23</span><br><span class="line">5:this</span><br><span class="line">4:is</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># sys.stdin 标准输入</span></span><br><span class="line"><span class="comment"># sys.stdout 标准输出</span></span><br><span class="line"><span class="comment"># sys.stderr 标准错误输出</span></span><br><span class="line"></span><br><span class="line">s = sys.stdin.read()</span><br><span class="line">strs = s[:s.find(<span class="string">&#x27;#&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">key = set()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strs:  <span class="comment"># i 是&#x27;T&#x27;,&#x27;h&#x27;,&#x27;i&#x27;,&#x27;s&#x27;,&#x27; &#x27;,.....</span></span><br><span class="line">    <span class="keyword">if</span> i.isalnum()==<span class="literal">False</span> <span class="keyword">and</span> i!=<span class="string">&#x27;_&#x27;</span>:</span><br><span class="line">        key.add(i)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> key:</span><br><span class="line">    strs = strs.replace(k,<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 去掉空格,全部变小写,变成列表</span></span><br><span class="line">strs=strs.strip(<span class="string">&#x27; &#x27;</span>).lower().split() <span class="comment">#全部变小写</span></span><br><span class="line">counts=dict()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strs:  <span class="comment"># i 是&#x27;This&#x27;,&#x27;is&#x27;,&#x27;a&#x27;,&#x27;test&#x27;,.....</span></span><br><span class="line">    k=i[:<span class="number">15</span>] <span class="comment"># 取前15个字符</span></span><br><span class="line">    <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> counts:</span><br><span class="line">        counts[k]=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        counts[k]+=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># sorted 方法返回的是一个新的 list,而不是在原来的基础上进行的操作</span></span><br><span class="line"><span class="comment"># ans是一个列表 [(&#x27;this&#x27;, 5), (&#x27;is&#x27;, 4), (&#x27;the&#x27;, 4), (&#x27;and&#x27;, 2), (&#x27;as&#x27;, 2),.....]</span></span><br><span class="line"><span class="comment"># 先按照value(x[1])值降序排列(&#x27;-&#x27;代表降序),value相同的,再按照key(x[0])值升序排列</span></span><br><span class="line"></span><br><span class="line">ans  = sorted(counts.items(), key=<span class="keyword">lambda</span> x:(-x[<span class="number">1</span>], x[<span class="number">0</span>]))</span><br><span class="line">print(len(counts))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,int(<span class="number">0.1</span>*len(counts))): <span class="comment"># 词频最大的前10%</span></span><br><span class="line">    print(str(ans[i][<span class="number">1</span>])+<span class="string">&#x27;:&#x27;</span>+ans[i][<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(1)</span></span><br><span class="line"><span class="string">Python isalnum() 方法检测字符串是否由字母和数字组成。</span></span><br><span class="line"><span class="string">str.isalnum()，如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt;str = &quot;this2009&quot;   # 字符中没有空格</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;print(str.isalnum())</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;str = &quot;this is string example....wow!!!&quot;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;print(str.isalnum())</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(2)</span></span><br><span class="line"><span class="string">str.strip([chars])</span></span><br><span class="line"><span class="string">chars -- 指定删除的字符（默认为空格）</span></span><br><span class="line"><span class="string">当chars不为空时，函数会被chars解成一个个的字符，然后将这些字符去掉。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>str2 = &#x27;1a2b12c21&#x27;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>str2.strip(&#x27;12&#x27;) #删除头尾的1和2</span></span><br><span class="line"><span class="string">&#x27;a2b12c&#x27;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>str2.lstrip(&#x27;12&#x27;) #删除开头的1和2</span></span><br><span class="line"><span class="string">&#x27;a2b12c21&#x27;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>str2.rstrip(&#x27;12&#x27;) #删除结尾的1和2</span></span><br><span class="line"><span class="string">&#x27;1a2b12c&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(3)</span></span><br><span class="line"><span class="string">Python split()通过指定分隔符对字符串进行切片,返回分割后的字符串列表(返回的是列表)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="14-使用函数输出指定范围内Fibonacci数的个数"><a href="#14-使用函数输出指定范围内Fibonacci数的个数" class="headerlink" title="14. 使用函数输出指定范围内Fibonacci数的个数"></a>14. 使用函数输出指定范围内Fibonacci数的个数</h3><p>本题要求实现一个计算Fibonacci数的简单函数，并利用其实现另一个函数,输出两正整数m和n（0&lt;m&lt;n≤100000）之间的所有Fibonacci数的数目。 所谓Fibonacci数列就是满足任一项数字是前两项的和（最开始两项均定义为1）的数列,fib(0)=fib(1)=1。其中函数fib(n)须返回第n项Fibonacci数；函数PrintFN(m,n)用列表返回[m, n]中的所有Fibonacci数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数接口定义：</span><br><span class="line">在这里描述函数接口。例如：</span><br><span class="line">fib(n),返回fib(n)的值</span><br><span class="line">PrintFN(m,n)，用列表返回[m, n]中的所有Fibonacci数。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">测试用例：</span><br><span class="line">/* 请在这里填写答案 */</span><br><span class="line">m,n,i=input().split()</span><br><span class="line">n=int(n)</span><br><span class="line">m=int(m)</span><br><span class="line">i=int(i)</span><br><span class="line">b=fib(i)</span><br><span class="line">print(<span class="string">&quot;fib(&#123;0&#125;) = &#123;1&#125;&quot;</span>.format(i,b))</span><br><span class="line">fiblist=PrintFN(m,n)</span><br><span class="line">print(len(fiblist))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">20 100 6</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">fib(6) &#x3D; 13</span><br><span class="line">4</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">0</span>) <span class="keyword">or</span> (n==<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PrintFN</span>(<span class="params">m,n</span>):</span></span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>): <span class="comment"># n &lt; 100000, fib(25) = 121393 &gt; 100000</span></span><br><span class="line">        <span class="keyword">if</span> m&lt;=fib(i)&lt;=n:</span><br><span class="line">            a.append(fib(i))</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><h3 id="15-使用函数求余弦函数的近似值"><a href="#15-使用函数求余弦函数的近似值" class="headerlink" title="15. 使用函数求余弦函数的近似值"></a>15. 使用函数求余弦函数的近似值</h3><p>本题要求实现一个函数，用下列公式求cos(x)近似值，精确到最后一项的绝对值小于eps（绝对值小于eps的项不要加）： </p><p> cos (x) = x^0 / 0! - x^2 / 2! + x^4 / 4! - x^6 / 6! + ?</p><p>函数接口定义：funcos(eps,x ),其中用户传入的参数为eps和x，函数funcos应返回用给定公式计算出来，保留小数4位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">测试用例：</span><br><span class="line">/* 请在这里填写答案 */</span><br><span class="line">eps=float(input())</span><br><span class="line">x=float(input())</span><br><span class="line">value=funcos(eps,x )</span><br><span class="line">print(<span class="string">&quot;cos(&#123;0&#125;) = &#123;1:.4f&#125;&quot;</span>.format(x,value))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">0.0001</span><br><span class="line">-3.1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">cos(-3.1) &#x3D; -0.9991</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jiecheng</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * jiecheng(n<span class="number">-1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcos</span>(<span class="params">eps,x</span>):</span></span><br><span class="line">    i = <span class="number">0</span> </span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> x**i/jiecheng(i) &gt;= eps:</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span>==<span class="number">0</span>:</span><br><span class="line">            s = s + x**i/jiecheng(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s = s - x**i/jiecheng(i)</span><br><span class="line">        i = i + <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h3 id="16-缩写词"><a href="#16-缩写词" class="headerlink" title="16. 缩写词"></a>16. 缩写词</h3><p>缩写词是由一个短语中每个单词的第一个字母组成，均为大写。例如，CPU是短语“central processing unit”的缩写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">函数接口定义：</span><br><span class="line">acronym(phrase);</span><br><span class="line">phrase是短语参数，返回短语的缩写词</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">测试用例：</span><br><span class="line">/* 请在这里填写答案 */</span><br><span class="line">phrase=input()</span><br><span class="line">print(acronym(phrase))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">central  processing  unit</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">CPU</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">acronym</span>(<span class="params">phrase</span>):</span></span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    ph = phrase.split()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ph)):</span><br><span class="line">        s = s + ph[i][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> s.upper()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-四则运算（用字典实现）&quot;&gt;&lt;a href=&quot;#1-四则运算（用字典实现）&quot; class=&quot;headerlink&quot; title=&quot;1. 四则运算（用字典实现）&quot;&gt;&lt;/a&gt;1. 四则运算（用字典实现）&lt;/h3&gt;&lt;p&gt;四则运算（用字典实现），比较c语言的switch</summary>
      
    
    
    
    
    <category term="python" scheme="https://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>PTA-python习题精选(1)</title>
    <link href="https://example.com/2020/10/09/3/"/>
    <id>https://example.com/2020/10/09/3/</id>
    <published>2020-10-08T16:00:00.000Z</published>
    <updated>2020-11-05T15:15:57.297Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-特殊a串数列求和"><a href="#1-特殊a串数列求和" class="headerlink" title="1. 特殊a串数列求和"></a>1. 特殊a串数列求和</h3><p>给定两个均不超过9的正整数<em>a</em>和<em>n</em>，要求编写程序求<em>a</em> + <em>a a</em> + <em>a</em> <em>a</em> <em>a</em> + + ⋯ + a a⋯a（n个a）之和。</p><p><strong>输入格式</strong>：输入在一行中给出不超过9的正整数<em>a</em>和<em>n</em>。</p><p><strong>输出格式</strong>：在一行中按照“s = 对应的和”的格式输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a, n = map(int, input().split())  <span class="comment"># 一次输入多个整数</span></span><br><span class="line">m = <span class="number">0</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> &lt; a &lt;= <span class="number">9</span> <span class="keyword">and</span> <span class="number">0</span> &lt; n &lt;= <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">        m = a*(<span class="number">10</span>**i) + m  <span class="comment"># 注意观察后一项与前一项的关系</span></span><br><span class="line">        s = s + m</span><br><span class="line">    print(<span class="string">&quot;s = &quot;</span>, s)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;0 &lt;= a &lt;= 9 &amp; 0 &lt;= n &lt;= 9! input again!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-查验身份证"><a href="#2-查验身份证" class="headerlink" title="2. 查验身份证"></a>2. 查验身份证</h3><p>一个合法的身份证号码由17位地区、日期编号和顺序编号加一位校验码组成。校验码计算规则如下：首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11求模得到值<strong>Z</strong>，最后按照以下关系对应<strong>Z</strong>值与校验码<strong>M</strong>的值</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Z：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line">M：<span class="number">1</span> <span class="number">0</span> X <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。</p><p><strong>输入格式</strong>：输入第一行给出正整数<em>N</em>（≤100）是输入的身份证号码的个数。随后<em>N</em>行，每行给出1个18位身份证号码。</p><p><strong>输出格式</strong>：按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出 <strong>All Pass！</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span>(<span class="params">ilist</span>):</span>  <span class="comment"># 判别函数</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    qlist = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>]  <span class="comment"># 权重列表</span></span><br><span class="line">    mlist = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>]  <span class="comment"># 检验列表</span></span><br><span class="line">    num = ilist[:<span class="number">17</span>]  <span class="comment"># 取输入的身份证号的前17位</span></span><br><span class="line">    last = ilist[<span class="number">-1</span>]  <span class="comment"># 取输入的身份证号的最后一位</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(num)):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;0&#x27;</span> &lt;= num[i] &lt;= <span class="string">&#x27;9&#x27;</span>:  <span class="comment"># 判断前十七位是否都为数字</span></span><br><span class="line">            m = int(num[i]) * qlist[i]</span><br><span class="line">            s = s + m  <span class="comment"># 求和</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    re = s % <span class="number">11</span>   <span class="comment"># 求模</span></span><br><span class="line">    <span class="keyword">if</span> mlist[re] == last:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment"># 实现一次输入多个字符串</span></span><br><span class="line">li = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">    li.append(input())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(li)):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> judge(li[i]):</span><br><span class="line">        print(li[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> count == n:</span><br><span class="line">    print(<span class="string">&quot;All Pass!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-求整数序列中出现次数最多的数"><a href="#3-求整数序列中出现次数最多的数" class="headerlink" title="3. 求整数序列中出现次数最多的数"></a>3. 求整数序列中出现次数最多的数</h3><p>本题要求统计一个整型序列中出现次数最多的整数及其出现次数。</p><p><strong>输入格式</strong>：输入在一行中给出序列中整数个数N（0&lt;N≤1000），以及N个整数。数字间以空格分隔。</p><p><strong>输出格式</strong>：在一行中输出出现次数最多的整数及其出现次数，数字间以空格分隔。题目保证这样的数字是唯一的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = input().split()</span><br><span class="line">h = a.count(a[<span class="number">0</span>])  <span class="comment"># 先计算第一位出现的次数</span></span><br><span class="line">x = a[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(a)):</span><br><span class="line">    <span class="keyword">if</span> a.count(a[i]) &gt; h:</span><br><span class="line">        h = a.count(a[i])  <span class="comment"># 出现次数</span></span><br><span class="line">        x = a[i]    <span class="comment"># 出现次数最多的整数</span></span><br><span class="line">print(<span class="string">&quot;&#123;:&gt;3s&#125;&#123;:&gt;3d&#125;&quot;</span>.format(x, h))</span><br></pre></td></tr></table></figure><p>​    <strong>附：C语言中求众数的程序：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n,i,j;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;输入整数个数：&quot;</span>); </span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">   <span class="keyword">int</span> a[n],b[n];   <span class="comment">//a[n]用于存放数组中的数，b[n]用于存放出现的次数 </span></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      b[i]=<span class="number">0</span>;   <span class="comment">//b[n]初始化 </span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">if</span> (a[j]==a[i])</span><br><span class="line">     &#123;</span><br><span class="line">        b[i]=b[i]+<span class="number">1</span>;  <span class="comment">//如果后面有数跟这个数相等，则其出现次数加1 </span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">int</span> max = b[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span>(b[i]&gt;max)</span><br><span class="line">      &#123;</span><br><span class="line">      max = b[i];  <span class="comment">//获得众数出现的次数 </span></span><br><span class="line">      index = i;   <span class="comment">//获得该数的下标 </span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;众数：%d  &quot;</span>,a[index]);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;次数：%d&quot;</span>,max); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-字符串转换成十进制整数"><a href="#4-字符串转换成十进制整数" class="headerlink" title="4. 字符串转换成十进制整数"></a>4. 字符串转换成十进制整数</h3><p>输入一个以<strong>#</strong>结束的字符串，本题要求滤去所有的非十六进制字符（不分大小写），组成一个新的表示十六进制数字的字符串，然后将其转换为十进制数后输出。如果在第一个十六进制字符之前存在字符 “-”，则代表该数是负数。</p><p><strong>输入格式</strong>：输入在一行中给出一个以#结束的非空字符串。</p><p><strong>输出格式</strong>：在一行中输出转换后的十进制数。题目保证输出在长整型范围内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = input()  <span class="comment"># 输入字符串</span></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">mask = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(a)):</span><br><span class="line">    <span class="keyword">if</span> a[i] == <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span>          <span class="comment"># 控制只处理“#”前面的字符串</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= a[i] &lt;= <span class="string">&#x27;9&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;a&#x27;</span> &lt;= str.lower(a[i]) &lt;= <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">        s = s + a[i]   <span class="comment"># 把该字符串中的十六进制字符重新组合为一个新的字符串</span></span><br><span class="line">index = a.find(s[<span class="number">0</span>])   <span class="comment"># 找到第一个十六进制字符的下标</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, index):  <span class="comment"># 寻找第一个十六进制字符之前是否存在字符“-”</span></span><br><span class="line">    <span class="keyword">if</span> a[i] == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        mask = <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">ten = int(str(s), <span class="number">16</span>)  <span class="comment"># 将该十六进制字符串转化为十进制</span></span><br><span class="line"><span class="keyword">if</span> mask == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> + str(ten))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(ten)</span><br></pre></td></tr></table></figure><h3 id="5-判断回文字符串"><a href="#5-判断回文字符串" class="headerlink" title="5. 判断回文字符串"></a>5. 判断回文字符串</h3><p>输入一个字符串，判断该字符串是否为回文。回文就是字符串中心对称，从左向右读和从右向左读的内容是一样的。</p><p><strong>输入格式：</strong>输入在一行中给出一个不超过80个字符长度的、以回车结束的非空字符串。</p><p><strong>输出格式：</strong>输出在第1行中输出字符串。如果它是回文字符串，在第2行中输出<strong>Yes</strong>，否则输出<strong>NO</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = input()</span><br><span class="line">a = reversed(list(s))</span><br><span class="line"><span class="keyword">if</span> list(a) == list(s):</span><br><span class="line">    print(s)</span><br><span class="line">    print(<span class="string">&quot;Yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(s)</span><br><span class="line">    print(<span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="6-统计素数并求和"><a href="#6-统计素数并求和" class="headerlink" title="6.  统计素数并求和"></a>6.  统计素数并求和</h3><p>本题要求统计给定整数<em>M</em>和<em>N</em>区间内素数的个数并对它们求和。</p><p><strong>输入格式：</strong>输入在一行中给出两个正整数<em>M</em>和<em>N</em>（1≤<em>M</em>≤<em>N</em>≤500）。</p><p><strong>输出格式：</strong>在一行中顺序输出<em>M</em>和<em>N</em>区间内素数的个数以及它们的和，数字间以空格分隔。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isprime</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> num != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    cut = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(a, b + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> isprime(i):</span><br><span class="line">            cut = cut + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> cut</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(a, b + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> isprime(i):</span><br><span class="line">            s = s + i</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">m, n = map(int, input().split())</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt;= m &lt;= n &lt;= <span class="number">500</span>:</span><br><span class="line">    print(<span class="string">&quot;&#123;:d&#125; &#123;:d&#125;&quot;</span>.format(count(m, n), sum(m, n)))  <span class="comment"># 以空格分隔</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;1 &lt;= m &lt;= n &lt;= 500!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-验证“哥德巴赫猜想”"><a href="#7-验证“哥德巴赫猜想”" class="headerlink" title="7.  验证“哥德巴赫猜想”"></a>7.  验证“哥德巴赫猜想”</h3><p>数学领域著名的“哥德巴赫猜想”的大致意思是：任何一个大于2的偶数总能表示为两个素数之和。比如：24=5+19，其中5和19都是素数。本实验的任务是设计一个程序，验证20亿以内的偶数都可以分解成两个素数之和。</p><p><strong>输入格式：</strong>输入在一行中给出一个(2, 2 000 000 000]范围内的偶数N。</p><p><strong>输出格式：</strong>在一行中按照格式“N = p + q”输出N的素数分解，其中p ≤ q均为素数。又因为这样的分解不唯一（例如24还可以分解为7+17），要求必须输出所有解中p最小的解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isprime</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(math.sqrt(num) + <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line"><span class="keyword">if</span> <span class="number">2</span> &lt; n &lt;= <span class="number">2000000000</span> <span class="keyword">and</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, (n // <span class="number">2</span> + <span class="number">1</span>)):  <span class="comment"># &quot;/&quot;表示浮点数除法，返回浮点结果; &quot;//&quot; 表示整数除法（向下取整）</span></span><br><span class="line">        x = n - i</span><br><span class="line">        <span class="keyword">if</span> isprime(i) <span class="keyword">and</span> isprime(x):</span><br><span class="line">            print(<span class="string">&quot;&#123;:d&#125; = &#123;:d&#125; + &#123;:d&#125;&quot;</span>.format(n, i, x))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;请输入20亿以内的偶数！&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="8-统计字符"><a href="#8-统计字符" class="headerlink" title="8.  统计字符"></a>8.  统计字符</h3><p>本题要求编写程序，输入10个字符，统计其中英文字母、空格或回车、数字字符和其他字符的个数。</p><p><strong>输入格式：</strong>输入为10个字符。最后一个回车表示输入结束，不算在内。</p><p><strong>输出格式：</strong>在一行内按照以下格式输出。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">letter</span> = 英文字母个数, <span class="attr">blank</span> = 空格或回车个数, <span class="attr">digit</span> = 数字字符个数, <span class="attr">other</span> = 其他字符个数</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">li = []</span><br><span class="line">letter = <span class="number">0</span>;blank = <span class="number">0</span>;digit = <span class="number">0</span>;other = <span class="number">0</span>;count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:     <span class="comment"># 输入固定数目的字符</span></span><br><span class="line">    a = list(input())</span><br><span class="line">    count = count + <span class="number">1</span>  <span class="comment"># count用于统计回车字符的个数</span></span><br><span class="line">    li.extend(a)       <span class="comment"># extend()函数用于在列表末尾一次性追加另一个序列中的多个值</span></span><br><span class="line">    <span class="keyword">if</span> len(li) + count &gt; <span class="number">10</span>:  <span class="comment"># 最后一个回车表示输入结束，不算在内</span></span><br><span class="line">        count = count <span class="number">-1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(li)):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= str.lower(li[i]) &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">        letter = letter + <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> li[i] == <span class="string">&quot; &quot;</span>:</span><br><span class="line">        blank = blank + <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= li[i] &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">        digit = digit + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        other = other + <span class="number">1</span></span><br><span class="line">print(<span class="string">&quot;letter = &#123;:d&#125;, blank = &#123;:d&#125;, digit = &#123;:d&#125;, other = &#123;:d&#125;&quot;</span>.format(letter, blank + count, digit, other))</span><br></pre></td></tr></table></figure><h3 id="9-猴子选大王"><a href="#9-猴子选大王" class="headerlink" title="9. 猴子选大王"></a>9. 猴子选大王</h3><p>一群猴子要选新猴王。新猴王的选择方法是：让N只候选猴子围成一圈，从某位置起顺序编号为1~N号。从第1号开始报数，每轮从1报到3，凡报到3的猴子即退出圈子，接着又从紧邻的下一只猴子开始同样的报数。如此不断循环，最后剩下的一只猴子就选为猴王。请问是原来第几号猴子当选猴王？</p><p><strong>输入格式：</strong>输入在一行中给一个正整数N（≤1000）。</p><p><strong>输出格式：</strong>在一行中输出当选猴王的编号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">约瑟夫环(约瑟夫问题)是一个数学的应用问题：已知n个人(以编号1，2，3...n分别表示)围坐在一张圆桌周围。</span></span><br><span class="line"><span class="string">从编号为k的人开始报数，数到m的那个人出列。他的下一个人又从1开始报数，数到m的那个人又出列。依此规律</span></span><br><span class="line"><span class="string">重复下去，直到圆桌周围的人全部出列。通常解决这类问题时我们把编号从 0~n-1，最后结果+1即为原问题的解。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">n=int(input())</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    monkey=[i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">while</span> len(monkey) &gt;= <span class="number">3</span>:</span><br><span class="line">        monkey.pop(<span class="number">2</span>)                  <span class="comment"># 第三只猴子的下标是2</span></span><br><span class="line">        monkey.append(monkey.pop(<span class="number">0</span>))   <span class="comment"># 将已删除元素前的两个元素移到队列尾，转化为线性问题</span></span><br><span class="line">        monkey.append(monkey.pop(<span class="number">0</span>))</span><br><span class="line">    print(monkey[<span class="number">1</span>])  <span class="comment"># 直到最后只剩两只猴子（或刚开始就只有两只猴子）</span></span><br></pre></td></tr></table></figure><h3 id="10-矩阵运算"><a href="#10-矩阵运算" class="headerlink" title="10. 矩阵运算"></a>10. 矩阵运算</h3><p>给定一个<em>n</em>×<em>n</em>的方阵，本题要求计算该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。副对角线为从矩阵的右上角至左下角的连线。</p><p><strong>输入格式：</strong>输入第一行给出正整数<em>n</em>（1&lt;<em>n</em>≤10）；随后<em>n</em>行，每行给出<em>n</em>个整数，其间以空格分隔。</p><p><strong>输出格式：</strong>在一行中给出该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">a = []</span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">    <span class="comment"># 将输入的以空格分隔的字符先存入列表再存入列表a中，即可形成多维列表</span></span><br><span class="line">    a.append(list(map(int, input().split()))) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">        <span class="keyword">if</span> i != n<span class="number">-1</span> <span class="keyword">and</span> j != n<span class="number">-1</span> <span class="keyword">and</span> (i+j) != n<span class="number">-1</span>:  <span class="comment"># 副对角线上 i+j=n-1</span></span><br><span class="line">            s = s + a[i][j]</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><h3 id="11-找鞍点"><a href="#11-找鞍点" class="headerlink" title="11. 找鞍点"></a>11. 找鞍点</h3><p>一个矩阵元素的“鞍点”是指该位置上的元素值在该行上最大、在该列上最小。</p><p>本题要求编写程序，求一个给定的<em>n</em>阶方阵的鞍点。</p><p><strong>输入格式：</strong>输入第一行给出一个正整数<em>n</em>（1≤<em>n</em>≤6）。随后<em>n</em>行，每行给出<em>n</em>个整数，其间以空格分隔。</p><p><strong>输出格式：</strong>输出在一行中按照“行下标 列下标”（下标从0开始）的格式输出鞍点的位置。如果鞍点不存在，则输出“NONE”。题目保证给出的矩阵至多存在一个鞍点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">    a.append(list(map(int, input().split())))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">        <span class="keyword">if</span> a[i][j] == max(a[i]):   <span class="comment"># 找出每行中的最大值</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">if</span> a[i][j] &gt; a[k][j]:  <span class="comment"># 判断每行中的最大值是否为该列中的最小值</span></span><br><span class="line">                    flag = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                print(<span class="string">&quot;&#123;:d&#125; &#123;:d&#125;&quot;</span>.format(i, j))</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">    print(<span class="string">&quot;NONE&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="12-输出三角形字符阵列"><a href="#12-输出三角形字符阵列" class="headerlink" title="12. 输出三角形字符阵列"></a>12. 输出三角形字符阵列</h3><p>本题要求编写程序，输出<em>n</em>行由大写字母A开始构成的三角形字符阵列。</p><p><strong>输入格式：</strong>输入在一行中给出一个正整数<em>n</em>（1≤<em>n</em>&lt;7）。</p><p><strong>输出格式：</strong>输出<em>n</em>行由大写字母A开始构成的三角形字符阵列。格式见输出样例，其中每个字母后面都有一个空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">A B C D </span><br><span class="line">E F G </span><br><span class="line">H I </span><br><span class="line">J </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">start = <span class="number">65</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, i):</span><br><span class="line">        print(<span class="string">&quot;&#123;:c&#125;&quot;</span>.format(start), end=<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 用ASCII码输出字符</span></span><br><span class="line">        start = start + <span class="number">1</span></span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count == i:</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            print()</span><br></pre></td></tr></table></figure><h3 id="13-矩阵转置"><a href="#13-矩阵转置" class="headerlink" title="13. 矩阵转置"></a>13. 矩阵转置</h3><p>将一个3×3矩阵转置（即行和列互换）</p><p><strong>输入格式：</strong>在一行中输入9个小于100的整数，其间各以一个空格间隔。</p><p><strong>输出格式：</strong>输出3行3列的二维数组，每个数据输出占4列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输出样例：</span><br><span class="line">   1   4   7</span><br><span class="line">   2   5   8</span><br><span class="line">   3   6   9</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = list(map(int, input().split()))</span><br><span class="line">b = [a[i::<span class="number">3</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]  <span class="comment"># 切片：object[start_index:end_index:step]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">&quot;&#123;:4d&#125;&quot;</span>.format(b[i][j]), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><h3 id="14-找出不是两个数组共有的元素"><a href="#14-找出不是两个数组共有的元素" class="headerlink" title="14. 找出不是两个数组共有的元素"></a>14. 找出不是两个数组共有的元素</h3><p>给定两个整型数组，本题要求找出不是两者共有的元素。</p><p><strong>输入格式：</strong>输入分别在两行中给出两个整型数组，每行先给出正整数<em>N</em>（≤20），随后是<em>N</em>个整数，其间以空格分隔。</p><p><strong>输出格式：</strong>在一行中按照数字给出的顺序输出不是两数组共有的元素，数字间以空格分隔，但行末不得有多余的空格。题目保证至少存在一个这样的数字。同一数字不重复输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">a = list(input().split())</span><br><span class="line">b = list(input().split())</span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line">trim_a = a[<span class="number">1</span>:]</span><br><span class="line">trim_b = b[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trim_a:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> trim_b <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> result:</span><br><span class="line">        result.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trim_b:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> trim_a <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> result:</span><br><span class="line">        result.append(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27; &#x27;</span>.join(result))  <span class="comment"># 把result中的元素以空格分隔输出</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Python join()方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</span></span><br><span class="line"><span class="string">例：   str = &quot;-&quot;</span></span><br><span class="line"><span class="string">      seq = (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span></span><br><span class="line"><span class="string">      print str.join(seq)</span></span><br><span class="line"><span class="string">输出： a-b-c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="15-找完数"><a href="#15-找完数" class="headerlink" title="15. 找完数"></a>15. 找完数</h3><p>所谓完数就是该数恰好等于除自身外的因子之和。例如：6=1+2+3，其中1、2、3为6的因子。本题要求编写程序，找出任意两正整数<em>m</em>和<em>n</em>之间的所有完数。</p><p><strong>输入格式：</strong>输入在一行中给出2个正整数<em>m</em>和<em>n</em>（1&lt;<em>m</em>≤<em>n</em>≤10000），中间以空格分隔。</p><p><strong>输出格式：</strong>逐行输出给定范围内每个完数的因子累加形式的分解式，每个完数占一行，格式为“完数 = 因子1 + 因子2 + … + 因子k”，其中完数和因子均按递增顺序给出。若区间内没有完数，则输出“None”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">m, n = map(int, input().split())</span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m, n+<span class="number">1</span>):</span><br><span class="line">    l.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, int(math.sqrt(i)+<span class="number">1</span>)):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:   <span class="comment"># 如果 i%j==0,则j是i的因子</span></span><br><span class="line">            l.append(j)</span><br><span class="line">            <span class="keyword">if</span> j*j != i:  <span class="comment"># 如果 j**2==i,只添加一次，避免重复</span></span><br><span class="line">                l.append(int(i/j))   <span class="comment"># python中 i/j 结果默认是浮点型的</span></span><br><span class="line">    <span class="keyword">if</span> sum(l) == i:</span><br><span class="line">        print(<span class="string">&quot;&#123;:d&#125; =&quot;</span>.format(i), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        l.sort()</span><br><span class="line">        l1 = [str(i) <span class="keyword">for</span> i <span class="keyword">in</span> l]   <span class="comment"># join函数不能组合数字类型,转化为字符型</span></span><br><span class="line">        print(<span class="string">&#x27; + &#x27;</span>.join(l1))</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">    l = []</span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&quot;None&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-特殊a串数列求和&quot;&gt;&lt;a href=&quot;#1-特殊a串数列求和&quot; class=&quot;headerlink&quot; title=&quot;1. 特殊a串数列求和&quot;&gt;&lt;/a&gt;1. 特殊a串数列求和&lt;/h3&gt;&lt;p&gt;给定两个均不超过9的正整数&lt;em&gt;a&lt;/em&gt;和&lt;em&gt;n&lt;/em&gt;，要</summary>
      
    
    
    
    
    <category term="python" scheme="https://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>最小二乘法</title>
    <link href="https://example.com/2020/10/07/2/"/>
    <id>https://example.com/2020/10/07/2/</id>
    <published>2020-10-06T16:00:00.000Z</published>
    <updated>2020-10-26T07:34:53.268Z</updated>
    
    <content type="html"><![CDATA[<p>最小二乘法（又称最小平方法）是一种数学优化技术，它通过最小化误差的平方和来寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。在机器学习，尤其是回归模型中，经常可以看到最小二乘法的身影。</p><hr><h2 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法:"></a>最小二乘法:</h2><p>目标函数 = $\sum$(观测值-理论值)<sup>2</sup></p><p>​      观测值就是我们的多组样本，理论值就是我们的假设拟合函数。目标函数也就是在机器学习中常说的损失函数，我们的目标是得到使目标函数最小化时候的拟合函数的模型。</p><hr><p><strong>先来看一个例子：</strong></p><p>测量一个物体的长度，用不同的测量工具得到的结果略有不同：</p><div class="table-container"><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">10.2</th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">10.3</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">9.8</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">9.9</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">9.8</td></tr></tbody></table></div><p>将测试的值在坐标系中绘制出来</p><p><img src="/2020/10/07/2/1.png" alt="1" style="zoom:67%;"></p><p>假设该物体的真实长度为$y$，在图上做出每个点到y的距离，即测量值与真实值之间的误差</p><p><img src="/2020/10/07/2/2.png" alt="2" style="zoom:67%;"></p><p>误差即为|$y$-$y_i$|，取绝对值较麻烦，所以可用平方代替：($y$-$y_i$)<sup>2</sup></p><p>总的误差平方就是        </p><p>​                 L = $\sum$($y$-$y_i$)<sup>2</sup></p><p>真实值$y$是猜测的，所以可以不断变换</p><p><img src="/2020/10/07/2/3.gif" alt="3" style="zoom:67%;"></p><p>则总的误差L 也是在不断地变化，最小二乘法要做的就是让总误差L最小，此时的猜测值$y$即为真值</p><p>即：</p><p>​          <strong>L = $\sum$($y$-$y_i$)<sup>2 </sup></strong> 最小 ——&gt;&gt; 真值$y$</p><hr><p><strong>再来看下一个例子：</strong></p><p><img src="/2020/10/07/2/4.png" alt="4" style="zoom:67%;"></p><p>近似为线性关系，所以我们不妨设：<strong>f(x) = ax+b</strong></p><p><img src="/2020/10/07/2/5.png" alt="5" style="zoom:67%;"></p><p>则       <strong>L= $\sum$(f($x_i$)-$y_i$)<sup>2</sup> =$\sum$(a$x_i$+b-$y_i$)<sup>2</sup></strong></p><hr><p>不同的a和b会导致不同的 L,根据多元微积分，</p><p>当     <img src="/2020/10/07/2/6.png" alt="6" style="zoom:67%;"></p><p>此时 L 取的最小值，求出此时的a值和b值</p><p>（或假设 f(x) = a$x_2$+bx+c,按照上述方法求出a，b，c值，选择不同的f(x),可得到不同的拟合曲线）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最小二乘法（又称最小平方法）是一种数学优化技术，它通过最小化误差的平方和来寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。在机器学习，尤其是回归模型中，经常可以看到最小二乘法的身影。&lt;/p&gt;
&lt;hr&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown快速入门</title>
    <link href="https://example.com/2020/10/06/firstPassage/"/>
    <id>https://example.com/2020/10/06/firstPassage/</id>
    <published>2020-10-06T15:40:23.000Z</published>
    <updated>2020-11-02T02:52:01.655Z</updated>
    
    <content type="html"><![CDATA[<p><strong>每一个成功者都有一个开始，勇于开始，才能找到成功的路。</strong></p><hr><p>MarkDown 是一种轻量级标记语言，它允许我们使用易读易写的纯文本格式编写文档，目前许多网站都在广泛使用MarkDown来撰写文章或是在论坛发表文章，当然用Hexo+github搭建的个人博客中也支持使用MarkDown来撰写文章，为了更好地搭建个人博客，我们有必要使用MarkDown来帮助我们来编写格式更好的文章。</p><h1 id="Markdown快速入门（typora）"><a href="#Markdown快速入门（typora）" class="headerlink" title="Markdown快速入门（typora）"></a>Markdown快速入门（typora）</h1><h2 id="1-代码块："><a href="#1-代码块：" class="headerlink" title="1.代码块："></a>1.代码块：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码块语法：</span></span><br><span class="line">​```java  <span class="comment">//得到java代码块，可在其中输入java代码</span></span><br><span class="line">     </span><br><span class="line">​```python  <span class="comment">//得到python代码块，可在其中输入python代码</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>python代码</strong><br>输入 <strong>“  ```python  ”</strong>, 即可得到下面这个python代码块，可在其中输入python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">address=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>)</span><br><span class="line">s.bind(address)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data,addr=s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">&#x27;收到的%s的数据:%s&#x27;</span>%(addr,data.decode()))</span><br><span class="line">    msg=input(<span class="string">&#x27;输入发送的信息&#x27;</span>)</span><br><span class="line">    s.sendto(msg.encode(),address)</span><br></pre></td></tr></table></figure><h2 id="2-标题："><a href="#2-标题：" class="headerlink" title="2.标题："></a>2.标题：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标题语法</span></span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line"><span class="comment">//#后面要有空格</span></span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="3-字体："><a href="#3-字体：" class="headerlink" title="3.字体："></a>3.字体：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加粗</span></span><br><span class="line">**故事的小黄花**</span><br><span class="line"><span class="comment">//代码高亮显示</span></span><br><span class="line">`从出生那年就飘着`</span><br><span class="line"><span class="comment">//删除线</span></span><br><span class="line">~~童年的荡秋千~~</span><br><span class="line"><span class="comment">//斜体</span></span><br><span class="line">*随记忆一直晃到现在*</span><br></pre></td></tr></table></figure><p><strong>故事的小黄花</strong></p><p><code>从出生那年就飘着</code></p><p><del>童年的荡秋千</del></p><p><em>随记忆一直晃到现在</em></p><h2 id="4-引用"><a href="#4-引用" class="headerlink" title="4.引用"></a>4.引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用语法</span></span><br><span class="line">&gt;作者：jay</span><br><span class="line">&gt;&gt;作者：jay</span><br><span class="line">&gt;&gt;&gt;作者：jay</span><br></pre></td></tr></table></figure><blockquote><p>作者：jay</p><blockquote><p>作者：jay</p><blockquote><p>作者：jay</p></blockquote></blockquote></blockquote><h2 id="5-分割线"><a href="#5-分割线" class="headerlink" title="5.分割线"></a>5.分割线</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分割线</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">//分割线2</span></span><br><span class="line">***</span><br></pre></td></tr></table></figure><hr><hr><h2 id="6-图片插入"><a href="#6-图片插入" class="headerlink" title="6.图片插入"></a>6.图片插入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在线图片/本地图片</span></span><br><span class="line">![图片名字](图片路径)</span><br></pre></td></tr></table></figure><p><img src="/2020/10/06/firstPassage/1.jpg" alt="我的照片"></p><h2 id="7-超链接"><a href="#7-超链接" class="headerlink" title="7.超链接"></a>7.超链接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//超链接语法</span></span><br><span class="line">[超链接的内容](超链接地址)</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/">菜鸟教程</a></p><h2 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无序列表</span></span><br><span class="line">-目录<span class="number">1</span></span><br><span class="line">-目录<span class="number">2</span></span><br><span class="line">-目录<span class="number">3</span></span><br><span class="line"><span class="comment">//有序列表 1+. +名称</span></span><br></pre></td></tr></table></figure><ul><li>目录1</li><li>目录2</li><li>目录3</li></ul><ol><li>首页</li><li>分类</li><li>标签</li></ol><h2 id="9-表格"><a href="#9-表格" class="headerlink" title="9.表格"></a>9.表格</h2><div class="table-container"><table><thead><tr><th style="text-align:center">表头</th><th style="text-align:center">表头</th><th style="text-align:center">表头</th></tr></thead><tbody><tr><td style="text-align:center">内容</td><td style="text-align:center">内容</td><td style="text-align:center">内容</td></tr></tbody></table></div><h2 id="10-启程"><a href="#10-启程" class="headerlink" title="10.启程"></a>10.启程</h2><p>​        这是我的第一遍博客，以后我会把平时学习的知识和心得发表到博客上，坚持比努力更可怕，即刻启程，加油！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;每一个成功者都有一个开始，勇于开始，才能找到成功的路。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;MarkDown 是一种轻量级标记语言，它允许我们使用易读易写的纯文本格式编写文档，目前许多网站都在广泛使用MarkDown来撰写文章或是在论坛发表文章，当然用</summary>
      
    
    
    
    
    <category term="MarkDown" scheme="https://example.com/tags/MarkDown/"/>
    
  </entry>
  
</feed>
